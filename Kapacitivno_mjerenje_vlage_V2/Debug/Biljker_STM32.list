
Biljker_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004620  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080046d8  080046d8  000056d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800476c  0800476c  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800476c  0800476c  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800476c  0800476c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800476c  0800476c  0000576c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004770  08004770  00005770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004774  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08004780  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08004780  0000610c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e56c  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002319  00000000  00000000  000145a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  000168c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd6  00000000  00000000  00017810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016204  00000000  00000000  000183e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f07  00000000  00000000  0002e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091232  00000000  00000000  0003f4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0723  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003774  00000000  00000000  000d0768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d3edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080046c0 	.word	0x080046c0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080046c0 	.word	0x080046c0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fd63 	bl	8000ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f989 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 fb39 	bl	800089c <MX_GPIO_Init>
  MX_ADC1_Init();
 800022a:	f000 fa13 	bl	8000654 <MX_ADC1_Init>
  MX_RTC_Init();
 800022e:	f000 fa7b 	bl	8000728 <MX_RTC_Init>
  MX_TIM3_Init();
 8000232:	f000 fab1 	bl	8000798 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000236:	f000 f9ef 	bl	8000618 <MX_NVIC_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
    {


        HAL_ResumeTick();  // Ponovno uključi SysTick
 800023a:	f000 fe0d 	bl	8000e58 <HAL_ResumeTick>
        HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);// Uključi izlaz takta na MCO (PA8)
 800023e:	2380      	movs	r3, #128	@ 0x80
 8000240:	059a      	lsls	r2, r3, #22
 8000242:	23a0      	movs	r3, #160	@ 0xa0
 8000244:	04d9      	lsls	r1, r3, #19
 8000246:	2380      	movs	r3, #128	@ 0x80
 8000248:	005b      	lsls	r3, r3, #1
 800024a:	0018      	movs	r0, r3
 800024c:	f002 fc96 	bl	8002b7c <HAL_RCC_MCOConfig>
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000250:	4bb2      	ldr	r3, [pc, #712]	@ (800051c <main+0x304>)
 8000252:	2104      	movs	r1, #4
 8000254:	0018      	movs	r0, r3
 8000256:	f003 f953 	bl	8003500 <HAL_TIM_PWM_Start>
        HAL_Delay(100);
 800025a:	2064      	movs	r0, #100	@ 0x64
 800025c:	f000 fdca 	bl	8000df4 <HAL_Delay>
        // Provjeri je li tipka (PB8) pritisnuta
            if(HAL_GPIO_ReadPin(GPIOB, TEST_Pin) == GPIO_PIN_SET)
 8000260:	2380      	movs	r3, #128	@ 0x80
 8000262:	005b      	lsls	r3, r3, #1
 8000264:	4aae      	ldr	r2, [pc, #696]	@ (8000520 <main+0x308>)
 8000266:	0019      	movs	r1, r3
 8000268:	0010      	movs	r0, r2
 800026a:	f001 ff7f 	bl	800216c <HAL_GPIO_ReadPin>
 800026e:	0003      	movs	r3, r0
 8000270:	2b01      	cmp	r3, #1
 8000272:	d1e2      	bne.n	800023a <main+0x22>
            {

        uint32_t startTime = HAL_GetTick(); // Dohvati trenutno vrijeme (vrijeme početka)
 8000274:	f000 fdb4 	bl	8000de0 <HAL_GetTick>
 8000278:	0003      	movs	r3, r0
 800027a:	607b      	str	r3, [r7, #4]

        while (HAL_GetTick() - startTime < 500)
 800027c:	e013      	b.n	80002a6 <main+0x8e>
        {
            HAL_ADC_Start(&hadc1); // Pokreni ADC
 800027e:	4ba9      	ldr	r3, [pc, #676]	@ (8000524 <main+0x30c>)
 8000280:	0018      	movs	r0, r3
 8000282:	f001 f909 	bl	8001498 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, 20); // Pričekaj završetak konverzije (timeout 20 ms)
 8000286:	4ba7      	ldr	r3, [pc, #668]	@ (8000524 <main+0x30c>)
 8000288:	2114      	movs	r1, #20
 800028a:	0018      	movs	r0, r3
 800028c:	f001 f98e 	bl	80015ac <HAL_ADC_PollForConversion>
            value = HAL_ADC_GetValue(&hadc1); // Dohvati izmjerenu vrijednost
 8000290:	4ba4      	ldr	r3, [pc, #656]	@ (8000524 <main+0x30c>)
 8000292:	0018      	movs	r0, r3
 8000294:	f001 fa1e 	bl	80016d4 <HAL_ADC_GetValue>
 8000298:	0003      	movs	r3, r0
 800029a:	b29a      	uxth	r2, r3
 800029c:	4ba2      	ldr	r3, [pc, #648]	@ (8000528 <main+0x310>)
 800029e:	801a      	strh	r2, [r3, #0]
            HAL_Delay(50);
 80002a0:	2032      	movs	r0, #50	@ 0x32
 80002a2:	f000 fda7 	bl	8000df4 <HAL_Delay>
        while (HAL_GetTick() - startTime < 500)
 80002a6:	f000 fd9b 	bl	8000de0 <HAL_GetTick>
 80002aa:	0002      	movs	r2, r0
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	1ad2      	subs	r2, r2, r3
 80002b0:	23fa      	movs	r3, #250	@ 0xfa
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d3e2      	bcc.n	800027e <main+0x66>
        }

            if (value <= 3350) // Mokro
 80002b8:	4b9b      	ldr	r3, [pc, #620]	@ (8000528 <main+0x310>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	4a9b      	ldr	r2, [pc, #620]	@ (800052c <main+0x314>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d81c      	bhi.n	80002fc <main+0xe4>
                {
                    HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);    // Ugasi crvenu
 80002c2:	23a0      	movs	r3, #160	@ 0xa0
 80002c4:	05db      	lsls	r3, r3, #23
 80002c6:	2200      	movs	r2, #0
 80002c8:	2104      	movs	r1, #4
 80002ca:	0018      	movs	r0, r3
 80002cc:	f001 ff6b 	bl	80021a6 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOA, GREEN_Pin, GPIO_PIN_RESET);  // Ugasi zelenu
 80002d0:	23a0      	movs	r3, #160	@ 0xa0
 80002d2:	05db      	lsls	r3, r3, #23
 80002d4:	2200      	movs	r2, #0
 80002d6:	2108      	movs	r1, #8
 80002d8:	0018      	movs	r0, r3
 80002da:	f001 ff64 	bl	80021a6 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOA, BLUE_Pin, GPIO_PIN_SET);     // Uključi plavu
 80002de:	23a0      	movs	r3, #160	@ 0xa0
 80002e0:	05db      	lsls	r3, r3, #23
 80002e2:	2201      	movs	r2, #1
 80002e4:	2102      	movs	r1, #2
 80002e6:	0018      	movs	r0, r3
 80002e8:	f001 ff5d 	bl	80021a6 <HAL_GPIO_WritePin>
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);// PWM isključi (vrijednost usporedbe = 0)
 80002ec:	4b8b      	ldr	r3, [pc, #556]	@ (800051c <main+0x304>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2200      	movs	r2, #0
 80002f2:	639a      	str	r2, [r3, #56]	@ 0x38
                    HAL_Delay(50); // Kratka pauza (100 ms) između uzorkovanja
 80002f4:	2032      	movs	r0, #50	@ 0x32
 80002f6:	f000 fd7d 	bl	8000df4 <HAL_Delay>
 80002fa:	e79e      	b.n	800023a <main+0x22>
                }
                else if (value > 3350 && value < 3550) // Umjereno
 80002fc:	4b8a      	ldr	r3, [pc, #552]	@ (8000528 <main+0x310>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	4a8a      	ldr	r2, [pc, #552]	@ (800052c <main+0x314>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d921      	bls.n	800034a <main+0x132>
 8000306:	4b88      	ldr	r3, [pc, #544]	@ (8000528 <main+0x310>)
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	4a89      	ldr	r2, [pc, #548]	@ (8000530 <main+0x318>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d81c      	bhi.n	800034a <main+0x132>
                {
                    HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);    // Ugasi crvenu
 8000310:	23a0      	movs	r3, #160	@ 0xa0
 8000312:	05db      	lsls	r3, r3, #23
 8000314:	2200      	movs	r2, #0
 8000316:	2104      	movs	r1, #4
 8000318:	0018      	movs	r0, r3
 800031a:	f001 ff44 	bl	80021a6 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOA, GREEN_Pin, GPIO_PIN_SET);    // Uključi zelenu
 800031e:	23a0      	movs	r3, #160	@ 0xa0
 8000320:	05db      	lsls	r3, r3, #23
 8000322:	2201      	movs	r2, #1
 8000324:	2108      	movs	r1, #8
 8000326:	0018      	movs	r0, r3
 8000328:	f001 ff3d 	bl	80021a6 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOA, BLUE_Pin, GPIO_PIN_RESET);   // Ugasi plavu
 800032c:	23a0      	movs	r3, #160	@ 0xa0
 800032e:	05db      	lsls	r3, r3, #23
 8000330:	2200      	movs	r2, #0
 8000332:	2102      	movs	r1, #2
 8000334:	0018      	movs	r0, r3
 8000336:	f001 ff36 	bl	80021a6 <HAL_GPIO_WritePin>
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);// PWM isključi (vrijednost usporedbe = 0)
 800033a:	4b78      	ldr	r3, [pc, #480]	@ (800051c <main+0x304>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2200      	movs	r2, #0
 8000340:	639a      	str	r2, [r3, #56]	@ 0x38
                    HAL_Delay(50);
 8000342:	2032      	movs	r0, #50	@ 0x32
 8000344:	f000 fd56 	bl	8000df4 <HAL_Delay>
 8000348:	e0e7      	b.n	800051a <main+0x302>
                }
                else if (value >= 3550) // Suho
 800034a:	4b77      	ldr	r3, [pc, #476]	@ (8000528 <main+0x310>)
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	4a78      	ldr	r2, [pc, #480]	@ (8000530 <main+0x318>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d954      	bls.n	80003fe <main+0x1e6>
                {
                    HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);      // Uključi crvenu
 8000354:	23a0      	movs	r3, #160	@ 0xa0
 8000356:	05db      	lsls	r3, r3, #23
 8000358:	2201      	movs	r2, #1
 800035a:	2104      	movs	r1, #4
 800035c:	0018      	movs	r0, r3
 800035e:	f001 ff22 	bl	80021a6 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOA, GREEN_Pin, GPIO_PIN_RESET);  // Ugasi zelenu
 8000362:	23a0      	movs	r3, #160	@ 0xa0
 8000364:	05db      	lsls	r3, r3, #23
 8000366:	2200      	movs	r2, #0
 8000368:	2108      	movs	r1, #8
 800036a:	0018      	movs	r0, r3
 800036c:	f001 ff1b 	bl	80021a6 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOA, BLUE_Pin, GPIO_PIN_RESET);   // Ugasi plavu
 8000370:	23a0      	movs	r3, #160	@ 0xa0
 8000372:	05db      	lsls	r3, r3, #23
 8000374:	2200      	movs	r2, #0
 8000376:	2102      	movs	r1, #2
 8000378:	0018      	movs	r0, r3
 800037a:	f001 ff14 	bl	80021a6 <HAL_GPIO_WritePin>
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);// PWM uključi s usporednom vrijednosti 1000 (≈50% DT)
 800037e:	4b67      	ldr	r3, [pc, #412]	@ (800051c <main+0x304>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	22fa      	movs	r2, #250	@ 0xfa
 8000384:	0092      	lsls	r2, r2, #2
 8000386:	639a      	str	r2, [r3, #56]	@ 0x38
                    HAL_Delay(50);
 8000388:	2032      	movs	r0, #50	@ 0x32
 800038a:	f000 fd33 	bl	8000df4 <HAL_Delay>


      HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);
 800038e:	23a0      	movs	r3, #160	@ 0xa0
 8000390:	05db      	lsls	r3, r3, #23
 8000392:	2200      	movs	r2, #0
 8000394:	2104      	movs	r1, #4
 8000396:	0018      	movs	r0, r3
 8000398:	f001 ff05 	bl	80021a6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GREEN_Pin, GPIO_PIN_RESET);  // Ugasi zelenu
 800039c:	23a0      	movs	r3, #160	@ 0xa0
 800039e:	05db      	lsls	r3, r3, #23
 80003a0:	2200      	movs	r2, #0
 80003a2:	2108      	movs	r1, #8
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 fefe 	bl	80021a6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, BLUE_Pin, GPIO_PIN_RESET);   // Ugasi plavu
 80003aa:	23a0      	movs	r3, #160	@ 0xa0
 80003ac:	05db      	lsls	r3, r3, #23
 80003ae:	2200      	movs	r2, #0
 80003b0:	2102      	movs	r1, #2
 80003b2:	0018      	movs	r0, r3
 80003b4:	f001 fef7 	bl	80021a6 <HAL_GPIO_WritePin>

        // Nakon petlje ugasi crvenu LED-icu
        HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_NOCLOCK, RCC_MCODIV_4);
 80003b8:	2380      	movs	r3, #128	@ 0x80
 80003ba:	059a      	lsls	r2, r3, #22
 80003bc:	2380      	movs	r3, #128	@ 0x80
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	2100      	movs	r1, #0
 80003c2:	0018      	movs	r0, r3
 80003c4:	f002 fbda 	bl	8002b7c <HAL_RCC_MCOConfig>
        // Isključi MCO izlaz
        HAL_ADC_Stop(&hadc1);
 80003c8:	4b56      	ldr	r3, [pc, #344]	@ (8000524 <main+0x30c>)
 80003ca:	0018      	movs	r0, r3
 80003cc:	f001 f8b2 	bl	8001534 <HAL_ADC_Stop>

       HAL_Delay(100); // Kratka pauza radi stabilnosti
 80003d0:	2064      	movs	r0, #100	@ 0x64
 80003d2:	f000 fd0f 	bl	8000df4 <HAL_Delay>
        HAL_SuspendTick();
 80003d6:	f000 fd31 	bl	8000e3c <HAL_SuspendTick>
         // Zaustavi SysTick timer (radi uštede energije)
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); // PWM OFF
 80003da:	4b50      	ldr	r3, [pc, #320]	@ (800051c <main+0x304>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2200      	movs	r2, #0
 80003e0:	639a      	str	r2, [r3, #56]	@ 0x38
        HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80003e2:	4b4e      	ldr	r3, [pc, #312]	@ (800051c <main+0x304>)
 80003e4:	2104      	movs	r1, #4
 80003e6:	0018      	movs	r0, r3
 80003e8:	f003 f962 	bl	80036b0 <HAL_TIM_PWM_Stop>
        HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI); // Uđi u STOP način rada i čekaj prekid
 80003ec:	2380      	movs	r3, #128	@ 0x80
 80003ee:	01db      	lsls	r3, r3, #7
 80003f0:	2101      	movs	r1, #1
 80003f2:	0018      	movs	r0, r3
 80003f4:	f001 ff32 	bl	800225c <HAL_PWR_EnterSTOPMode>
        SystemClock_Config();
 80003f8:	f000 f89e 	bl	8000538 <SystemClock_Config>
 80003fc:	e71d      	b.n	800023a <main+0x22>
        } else //ako je tipkalo pritisnuto izvedi provjeru zujalice i LED-ice
         {

            uint32_t startTime = HAL_GetTick(); // Dohvati trenutno vrijeme (vrijeme početka)
 80003fe:	f000 fcef 	bl	8000de0 <HAL_GetTick>
 8000402:	0003      	movs	r3, r0
 8000404:	603b      	str	r3, [r7, #0]
        	 while (HAL_GetTick() - startTime < 500)
 8000406:	e013      	b.n	8000430 <main+0x218>
        	        {
        	            HAL_ADC_Start(&hadc1); // Pokreni ADC
 8000408:	4b46      	ldr	r3, [pc, #280]	@ (8000524 <main+0x30c>)
 800040a:	0018      	movs	r0, r3
 800040c:	f001 f844 	bl	8001498 <HAL_ADC_Start>
        	            HAL_ADC_PollForConversion(&hadc1, 20); // Pričekaj završetak konverzije (timeout 20 ms)
 8000410:	4b44      	ldr	r3, [pc, #272]	@ (8000524 <main+0x30c>)
 8000412:	2114      	movs	r1, #20
 8000414:	0018      	movs	r0, r3
 8000416:	f001 f8c9 	bl	80015ac <HAL_ADC_PollForConversion>
        	            value = HAL_ADC_GetValue(&hadc1); // Dohvati izmjerenu vrijednost
 800041a:	4b42      	ldr	r3, [pc, #264]	@ (8000524 <main+0x30c>)
 800041c:	0018      	movs	r0, r3
 800041e:	f001 f959 	bl	80016d4 <HAL_ADC_GetValue>
 8000422:	0003      	movs	r3, r0
 8000424:	b29a      	uxth	r2, r3
 8000426:	4b40      	ldr	r3, [pc, #256]	@ (8000528 <main+0x310>)
 8000428:	801a      	strh	r2, [r3, #0]
        	            HAL_Delay(50);
 800042a:	2032      	movs	r0, #50	@ 0x32
 800042c:	f000 fce2 	bl	8000df4 <HAL_Delay>
        	 while (HAL_GetTick() - startTime < 500)
 8000430:	f000 fcd6 	bl	8000de0 <HAL_GetTick>
 8000434:	0002      	movs	r2, r0
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	1ad2      	subs	r2, r2, r3
 800043a:	23fa      	movs	r3, #250	@ 0xfa
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	429a      	cmp	r2, r3
 8000440:	d3e2      	bcc.n	8000408 <main+0x1f0>
        	        }

        	            if (value <= 3300) // Mokro
 8000442:	4b39      	ldr	r3, [pc, #228]	@ (8000528 <main+0x310>)
 8000444:	881b      	ldrh	r3, [r3, #0]
 8000446:	4a3b      	ldr	r2, [pc, #236]	@ (8000534 <main+0x31c>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d81c      	bhi.n	8000486 <main+0x26e>
        	                {
        	                    HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);    // Ugasi crvenu
 800044c:	23a0      	movs	r3, #160	@ 0xa0
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	2200      	movs	r2, #0
 8000452:	2104      	movs	r1, #4
 8000454:	0018      	movs	r0, r3
 8000456:	f001 fea6 	bl	80021a6 <HAL_GPIO_WritePin>
        	                    HAL_GPIO_WritePin(GPIOA, GREEN_Pin, GPIO_PIN_RESET);  // Ugasi zelenu
 800045a:	23a0      	movs	r3, #160	@ 0xa0
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	2200      	movs	r2, #0
 8000460:	2108      	movs	r1, #8
 8000462:	0018      	movs	r0, r3
 8000464:	f001 fe9f 	bl	80021a6 <HAL_GPIO_WritePin>
        	                    HAL_GPIO_WritePin(GPIOA, BLUE_Pin, GPIO_PIN_SET);     // Uključi plavu
 8000468:	23a0      	movs	r3, #160	@ 0xa0
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	2201      	movs	r2, #1
 800046e:	2102      	movs	r1, #2
 8000470:	0018      	movs	r0, r3
 8000472:	f001 fe98 	bl	80021a6 <HAL_GPIO_WritePin>
        	                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);// PWM isključi (vrijednost usporedbe = 0)
 8000476:	4b29      	ldr	r3, [pc, #164]	@ (800051c <main+0x304>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2200      	movs	r2, #0
 800047c:	639a      	str	r2, [r3, #56]	@ 0x38
        	                    HAL_Delay(50);
 800047e:	2032      	movs	r0, #50	@ 0x32
 8000480:	f000 fcb8 	bl	8000df4 <HAL_Delay>
 8000484:	e6d9      	b.n	800023a <main+0x22>
        	                }
        	                else if (value > 3300 && value < 3550) // Umjereno
 8000486:	4b28      	ldr	r3, [pc, #160]	@ (8000528 <main+0x310>)
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	4a2a      	ldr	r2, [pc, #168]	@ (8000534 <main+0x31c>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d921      	bls.n	80004d4 <main+0x2bc>
 8000490:	4b25      	ldr	r3, [pc, #148]	@ (8000528 <main+0x310>)
 8000492:	881b      	ldrh	r3, [r3, #0]
 8000494:	4a26      	ldr	r2, [pc, #152]	@ (8000530 <main+0x318>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d81c      	bhi.n	80004d4 <main+0x2bc>
        	                {
        	                    HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_RESET);    // Ugasi crvenu
 800049a:	23a0      	movs	r3, #160	@ 0xa0
 800049c:	05db      	lsls	r3, r3, #23
 800049e:	2200      	movs	r2, #0
 80004a0:	2104      	movs	r1, #4
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 fe7f 	bl	80021a6 <HAL_GPIO_WritePin>
        	                    HAL_GPIO_WritePin(GPIOA, GREEN_Pin, GPIO_PIN_SET);    // Uključi zelenu
 80004a8:	23a0      	movs	r3, #160	@ 0xa0
 80004aa:	05db      	lsls	r3, r3, #23
 80004ac:	2201      	movs	r2, #1
 80004ae:	2108      	movs	r1, #8
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 fe78 	bl	80021a6 <HAL_GPIO_WritePin>
        	                    HAL_GPIO_WritePin(GPIOA, BLUE_Pin, GPIO_PIN_RESET);   // Ugasi plavu
 80004b6:	23a0      	movs	r3, #160	@ 0xa0
 80004b8:	05db      	lsls	r3, r3, #23
 80004ba:	2200      	movs	r2, #0
 80004bc:	2102      	movs	r1, #2
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 fe71 	bl	80021a6 <HAL_GPIO_WritePin>
        	                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);// PWM isključi (vrijednost usporedbe = 0)
 80004c4:	4b15      	ldr	r3, [pc, #84]	@ (800051c <main+0x304>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2200      	movs	r2, #0
 80004ca:	639a      	str	r2, [r3, #56]	@ 0x38
        	                    HAL_Delay(50);
 80004cc:	2032      	movs	r0, #50	@ 0x32
 80004ce:	f000 fc91 	bl	8000df4 <HAL_Delay>
 80004d2:	e022      	b.n	800051a <main+0x302>
        	                }
        	                else if (value >= 3550) // Suho
 80004d4:	4b14      	ldr	r3, [pc, #80]	@ (8000528 <main+0x310>)
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	4a15      	ldr	r2, [pc, #84]	@ (8000530 <main+0x318>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d800      	bhi.n	80004e0 <main+0x2c8>
 80004de:	e6ac      	b.n	800023a <main+0x22>
        	                {
        	                    HAL_GPIO_WritePin(GPIOA, RED_Pin, GPIO_PIN_SET);      // Uključi crvenu
 80004e0:	23a0      	movs	r3, #160	@ 0xa0
 80004e2:	05db      	lsls	r3, r3, #23
 80004e4:	2201      	movs	r2, #1
 80004e6:	2104      	movs	r1, #4
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 fe5c 	bl	80021a6 <HAL_GPIO_WritePin>
        	                    HAL_GPIO_WritePin(GPIOA, GREEN_Pin, GPIO_PIN_RESET);  // Ugasi zelenu
 80004ee:	23a0      	movs	r3, #160	@ 0xa0
 80004f0:	05db      	lsls	r3, r3, #23
 80004f2:	2200      	movs	r2, #0
 80004f4:	2108      	movs	r1, #8
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 fe55 	bl	80021a6 <HAL_GPIO_WritePin>
        	                    HAL_GPIO_WritePin(GPIOA, BLUE_Pin, GPIO_PIN_RESET);   // Ugasi plavu
 80004fc:	23a0      	movs	r3, #160	@ 0xa0
 80004fe:	05db      	lsls	r3, r3, #23
 8000500:	2200      	movs	r2, #0
 8000502:	2102      	movs	r1, #2
 8000504:	0018      	movs	r0, r3
 8000506:	f001 fe4e 	bl	80021a6 <HAL_GPIO_WritePin>
        	                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);// PWM uključi s usporednom vrijednosti 1000 (≈50% DT)
 800050a:	4b04      	ldr	r3, [pc, #16]	@ (800051c <main+0x304>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	22fa      	movs	r2, #250	@ 0xfa
 8000510:	0092      	lsls	r2, r2, #2
 8000512:	639a      	str	r2, [r3, #56]	@ 0x38
        	                    HAL_Delay(50);
 8000514:	2032      	movs	r0, #50	@ 0x32
 8000516:	f000 fc6d 	bl	8000df4 <HAL_Delay>
        HAL_ResumeTick();  // Ponovno uključi SysTick
 800051a:	e68e      	b.n	800023a <main+0x22>
 800051c:	200000bc 	.word	0x200000bc
 8000520:	50000400 	.word	0x50000400
 8000524:	2000002c 	.word	0x2000002c
 8000528:	20000028 	.word	0x20000028
 800052c:	00000d16 	.word	0x00000d16
 8000530:	00000ddd 	.word	0x00000ddd
 8000534:	00000ce4 	.word	0x00000ce4

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b093      	sub	sp, #76	@ 0x4c
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	2414      	movs	r4, #20
 8000540:	193b      	adds	r3, r7, r4
 8000542:	0018      	movs	r0, r3
 8000544:	2334      	movs	r3, #52	@ 0x34
 8000546:	001a      	movs	r2, r3
 8000548:	2100      	movs	r1, #0
 800054a:	f004 f88d 	bl	8004668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	0018      	movs	r0, r3
 8000552:	2310      	movs	r3, #16
 8000554:	001a      	movs	r2, r3
 8000556:	2100      	movs	r1, #0
 8000558:	f004 f886 	bl	8004668 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2380      	movs	r3, #128	@ 0x80
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	0018      	movs	r0, r3
 8000562:	f001 feb3 	bl	80022cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	220a      	movs	r2, #10
 800056a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2280      	movs	r2, #128	@ 0x80
 8000570:	0052      	lsls	r2, r2, #1
 8000572:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2280      	movs	r2, #128	@ 0x80
 8000578:	0152      	lsls	r2, r2, #5
 800057a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	0021      	movs	r1, r4
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2240      	movs	r2, #64	@ 0x40
 8000582:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2201      	movs	r2, #1
 8000588:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2202      	movs	r2, #2
 800058e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2202      	movs	r2, #2
 8000594:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2208      	movs	r2, #8
 80005a0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2280      	movs	r2, #128	@ 0x80
 80005a6:	0292      	lsls	r2, r2, #10
 80005a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2280      	movs	r2, #128	@ 0x80
 80005ae:	0592      	lsls	r2, r2, #22
 80005b0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 fec9 	bl	800234c <HAL_RCC_OscConfig>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005be:	f000 fa21 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2207      	movs	r2, #7
 80005c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2100      	movs	r1, #0
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 f9c4 	bl	800296c <HAL_RCC_ClockConfig>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005e8:	f000 fa0c 	bl	8000a04 <Error_Handler>
  }
  __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80005ec:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <SystemClock_Config+0xdc>)
 80005ee:	68da      	ldr	r2, [r3, #12]
 80005f0:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <SystemClock_Config+0xdc>)
 80005f2:	2180      	movs	r1, #128	@ 0x80
 80005f4:	0549      	lsls	r1, r1, #21
 80005f6:	430a      	orrs	r2, r1
 80005f8:	60da      	str	r2, [r3, #12]
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 80005fa:	2380      	movs	r3, #128	@ 0x80
 80005fc:	059a      	lsls	r2, r3, #22
 80005fe:	23a0      	movs	r3, #160	@ 0xa0
 8000600:	04d9      	lsls	r1, r3, #19
 8000602:	2380      	movs	r3, #128	@ 0x80
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	0018      	movs	r0, r3
 8000608:	f002 fab8 	bl	8002b7c <HAL_RCC_MCOConfig>
}
 800060c:	46c0      	nop			@ (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	b013      	add	sp, #76	@ 0x4c
 8000612:	bd90      	pop	{r4, r7, pc}
 8000614:	40021000 	.word	0x40021000

08000618 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* RTC_TAMP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	2002      	movs	r0, #2
 8000622:	f001 fc0d 	bl	8001e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000626:	2002      	movs	r0, #2
 8000628:	f001 fc1f 	bl	8001e6a <HAL_NVIC_EnableIRQ>
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	2007      	movs	r0, #7
 8000632:	f001 fc05 	bl	8001e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000636:	2007      	movs	r0, #7
 8000638:	f001 fc17 	bl	8001e6a <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	2100      	movs	r1, #0
 8000640:	2010      	movs	r0, #16
 8000642:	f001 fbfd 	bl	8001e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000646:	2010      	movs	r0, #16
 8000648:	f001 fc0f 	bl	8001e6a <HAL_NVIC_EnableIRQ>
}
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	0018      	movs	r0, r3
 800065e:	230c      	movs	r3, #12
 8000660:	001a      	movs	r2, r3
 8000662:	2100      	movs	r1, #0
 8000664:	f004 f800 	bl	8004668 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000668:	4b2d      	ldr	r3, [pc, #180]	@ (8000720 <MX_ADC1_Init+0xcc>)
 800066a:	4a2e      	ldr	r2, [pc, #184]	@ (8000724 <MX_ADC1_Init+0xd0>)
 800066c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800066e:	4b2c      	ldr	r3, [pc, #176]	@ (8000720 <MX_ADC1_Init+0xcc>)
 8000670:	22c0      	movs	r2, #192	@ 0xc0
 8000672:	0612      	lsls	r2, r2, #24
 8000674:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000676:	4b2a      	ldr	r3, [pc, #168]	@ (8000720 <MX_ADC1_Init+0xcc>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067c:	4b28      	ldr	r3, [pc, #160]	@ (8000720 <MX_ADC1_Init+0xcc>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000682:	4b27      	ldr	r3, [pc, #156]	@ (8000720 <MX_ADC1_Init+0xcc>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000688:	4b25      	ldr	r3, [pc, #148]	@ (8000720 <MX_ADC1_Init+0xcc>)
 800068a:	2204      	movs	r2, #4
 800068c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800068e:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <MX_ADC1_Init+0xcc>)
 8000690:	2200      	movs	r2, #0
 8000692:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <MX_ADC1_Init+0xcc>)
 8000696:	2200      	movs	r2, #0
 8000698:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800069a:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <MX_ADC1_Init+0xcc>)
 800069c:	2200      	movs	r2, #0
 800069e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <MX_ADC1_Init+0xcc>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <MX_ADC1_Init+0xcc>)
 80006a8:	2220      	movs	r2, #32
 80006aa:	2100      	movs	r1, #0
 80006ac:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <MX_ADC1_Init+0xcc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <MX_ADC1_Init+0xcc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ba:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <MX_ADC1_Init+0xcc>)
 80006bc:	222c      	movs	r2, #44	@ 0x2c
 80006be:	2100      	movs	r1, #0
 80006c0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c2:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_ADC1_Init+0xcc>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80006c8:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <MX_ADC1_Init+0xcc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_ADC1_Init+0xcc>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_ADC1_Init+0xcc>)
 80006d6:	223c      	movs	r2, #60	@ 0x3c
 80006d8:	2100      	movs	r1, #0
 80006da:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80006dc:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_ADC1_Init+0xcc>)
 80006de:	2200      	movs	r2, #0
 80006e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_ADC1_Init+0xcc>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 fd2f 	bl	8001148 <HAL_ADC_Init>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80006ee:	f000 f989 	bl	8000a04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2201      	movs	r2, #1
 80006f6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	1d3a      	adds	r2, r7, #4
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_ADC1_Init+0xcc>)
 8000708:	0011      	movs	r1, r2
 800070a:	0018      	movs	r0, r3
 800070c:	f000 ffee 	bl	80016ec <HAL_ADC_ConfigChannel>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000714:	f000 f976 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000718:	46c0      	nop			@ (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b004      	add	sp, #16
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000002c 	.word	0x2000002c
 8000724:	40012400 	.word	0x40012400

08000728 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800072c:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_RTC_Init+0x68>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <MX_RTC_Init+0x6c>)
 8000730:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000732:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <MX_RTC_Init+0x68>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000738:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <MX_RTC_Init+0x68>)
 800073a:	227f      	movs	r2, #127	@ 0x7f
 800073c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_RTC_Init+0x68>)
 8000740:	22ff      	movs	r2, #255	@ 0xff
 8000742:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_RTC_Init+0x68>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_RTC_Init+0x68>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_RTC_Init+0x68>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_RTC_Init+0x68>)
 8000758:	2280      	movs	r2, #128	@ 0x80
 800075a:	05d2      	lsls	r2, r2, #23
 800075c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_RTC_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <MX_RTC_Init+0x68>)
 8000766:	0018      	movs	r0, r3
 8000768:	f002 fc04 	bl	8002f74 <HAL_RTC_Init>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 f948 	bl	8000a04 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 5, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_RTC_Init+0x68>)
 8000776:	2204      	movs	r2, #4
 8000778:	2105      	movs	r1, #5
 800077a:	0018      	movs	r0, r3
 800077c:	f002 fd48 	bl	8003210 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 f93e 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	20000090 	.word	0x20000090
 8000794:	40002800 	.word	0x40002800

08000798 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08e      	sub	sp, #56	@ 0x38
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079e:	2328      	movs	r3, #40	@ 0x28
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	0018      	movs	r0, r3
 80007a4:	2310      	movs	r3, #16
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f003 ff5d 	bl	8004668 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ae:	231c      	movs	r3, #28
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	0018      	movs	r0, r3
 80007b4:	230c      	movs	r3, #12
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f003 ff55 	bl	8004668 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007be:	003b      	movs	r3, r7
 80007c0:	0018      	movs	r0, r3
 80007c2:	231c      	movs	r3, #28
 80007c4:	001a      	movs	r2, r3
 80007c6:	2100      	movs	r1, #0
 80007c8:	f003 ff4e 	bl	8004668 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007cc:	4b30      	ldr	r3, [pc, #192]	@ (8000890 <MX_TIM3_Init+0xf8>)
 80007ce:	4a31      	ldr	r2, [pc, #196]	@ (8000894 <MX_TIM3_Init+0xfc>)
 80007d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000890 <MX_TIM3_Init+0xf8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000890 <MX_TIM3_Init+0xf8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80007de:	4b2c      	ldr	r3, [pc, #176]	@ (8000890 <MX_TIM3_Init+0xf8>)
 80007e0:	4a2d      	ldr	r2, [pc, #180]	@ (8000898 <MX_TIM3_Init+0x100>)
 80007e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000890 <MX_TIM3_Init+0xf8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <MX_TIM3_Init+0xf8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007f0:	4b27      	ldr	r3, [pc, #156]	@ (8000890 <MX_TIM3_Init+0xf8>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f002 fdcc 	bl	8003390 <HAL_TIM_Base_Init>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80007fc:	f000 f902 	bl	8000a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000800:	2128      	movs	r1, #40	@ 0x28
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2280      	movs	r2, #128	@ 0x80
 8000806:	0152      	lsls	r2, r2, #5
 8000808:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800080a:	187a      	adds	r2, r7, r1
 800080c:	4b20      	ldr	r3, [pc, #128]	@ (8000890 <MX_TIM3_Init+0xf8>)
 800080e:	0011      	movs	r1, r2
 8000810:	0018      	movs	r0, r3
 8000812:	f003 f9db 	bl	8003bcc <HAL_TIM_ConfigClockSource>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800081a:	f000 f8f3 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800081e:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <MX_TIM3_Init+0xf8>)
 8000820:	0018      	movs	r0, r3
 8000822:	f002 fe0d 	bl	8003440 <HAL_TIM_PWM_Init>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800082a:	f000 f8eb 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082e:	211c      	movs	r1, #28
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800083c:	187a      	adds	r2, r7, r1
 800083e:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_TIM3_Init+0xf8>)
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f003 fe96 	bl	8004574 <HAL_TIMEx_MasterConfigSynchronization>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800084c:	f000 f8da 	bl	8000a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000850:	003b      	movs	r3, r7
 8000852:	2260      	movs	r2, #96	@ 0x60
 8000854:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1000;
 8000856:	003b      	movs	r3, r7
 8000858:	22fa      	movs	r2, #250	@ 0xfa
 800085a:	0092      	lsls	r2, r2, #2
 800085c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085e:	003b      	movs	r3, r7
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000864:	003b      	movs	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800086a:	0039      	movs	r1, r7
 800086c:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <MX_TIM3_Init+0xf8>)
 800086e:	2204      	movs	r2, #4
 8000870:	0018      	movs	r0, r3
 8000872:	f003 f8ab 	bl	80039cc <HAL_TIM_PWM_ConfigChannel>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800087a:	f000 f8c3 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800087e:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <MX_TIM3_Init+0xf8>)
 8000880:	0018      	movs	r0, r3
 8000882:	f000 f989 	bl	8000b98 <HAL_TIM_MspPostInit>

}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b00e      	add	sp, #56	@ 0x38
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	200000bc 	.word	0x200000bc
 8000894:	40000400 	.word	0x40000400
 8000898:	000007cf 	.word	0x000007cf

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b089      	sub	sp, #36	@ 0x24
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	240c      	movs	r4, #12
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	0018      	movs	r0, r3
 80008a8:	2314      	movs	r3, #20
 80008aa:	001a      	movs	r2, r3
 80008ac:	2100      	movs	r1, #0
 80008ae:	f003 fedb 	bl	8004668 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b4f      	ldr	r3, [pc, #316]	@ (80009f0 <MX_GPIO_Init+0x154>)
 80008b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008b6:	4b4e      	ldr	r3, [pc, #312]	@ (80009f0 <MX_GPIO_Init+0x154>)
 80008b8:	2102      	movs	r1, #2
 80008ba:	430a      	orrs	r2, r1
 80008bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80008be:	4b4c      	ldr	r3, [pc, #304]	@ (80009f0 <MX_GPIO_Init+0x154>)
 80008c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008c2:	2202      	movs	r2, #2
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b49      	ldr	r3, [pc, #292]	@ (80009f0 <MX_GPIO_Init+0x154>)
 80008cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ce:	4b48      	ldr	r3, [pc, #288]	@ (80009f0 <MX_GPIO_Init+0x154>)
 80008d0:	2104      	movs	r1, #4
 80008d2:	430a      	orrs	r2, r1
 80008d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008d6:	4b46      	ldr	r3, [pc, #280]	@ (80009f0 <MX_GPIO_Init+0x154>)
 80008d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008da:	2204      	movs	r2, #4
 80008dc:	4013      	ands	r3, r2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b43      	ldr	r3, [pc, #268]	@ (80009f0 <MX_GPIO_Init+0x154>)
 80008e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008e6:	4b42      	ldr	r3, [pc, #264]	@ (80009f0 <MX_GPIO_Init+0x154>)
 80008e8:	2101      	movs	r1, #1
 80008ea:	430a      	orrs	r2, r1
 80008ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ee:	4b40      	ldr	r3, [pc, #256]	@ (80009f0 <MX_GPIO_Init+0x154>)
 80008f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008f2:	2201      	movs	r2, #1
 80008f4:	4013      	ands	r3, r2
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLUE_Pin|RED_Pin|GREEN_Pin, GPIO_PIN_RESET);
 80008fa:	23a0      	movs	r3, #160	@ 0xa0
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	2200      	movs	r2, #0
 8000900:	210e      	movs	r1, #14
 8000902:	0018      	movs	r0, r3
 8000904:	f001 fc4f 	bl	80021a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB7 PB9 PB0 PB1
                           PB2 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1
 8000908:	193b      	adds	r3, r7, r4
 800090a:	4a3a      	ldr	r2, [pc, #232]	@ (80009f4 <MX_GPIO_Init+0x158>)
 800090c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2203      	movs	r2, #3
 8000912:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	193b      	adds	r3, r7, r4
 800091c:	4a36      	ldr	r2, [pc, #216]	@ (80009f8 <MX_GPIO_Init+0x15c>)
 800091e:	0019      	movs	r1, r3
 8000920:	0010      	movs	r0, r2
 8000922:	f001 fabf 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8000926:	0021      	movs	r1, r4
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2280      	movs	r2, #128	@ 0x80
 800092c:	0052      	lsls	r2, r2, #1
 800092e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2284      	movs	r2, #132	@ 0x84
 8000934:	0392      	lsls	r2, r2, #14
 8000936:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2201      	movs	r2, #1
 800093c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 800093e:	000c      	movs	r4, r1
 8000940:	187b      	adds	r3, r7, r1
 8000942:	4a2d      	ldr	r2, [pc, #180]	@ (80009f8 <MX_GPIO_Init+0x15c>)
 8000944:	0019      	movs	r1, r3
 8000946:	0010      	movs	r0, r2
 8000948:	f001 faac 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800094c:	0021      	movs	r1, r4
 800094e:	187b      	adds	r3, r7, r1
 8000950:	22c0      	movs	r2, #192	@ 0xc0
 8000952:	0212      	lsls	r2, r2, #8
 8000954:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000956:	000c      	movs	r4, r1
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2203      	movs	r2, #3
 800095c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000964:	193b      	adds	r3, r7, r4
 8000966:	4a25      	ldr	r2, [pc, #148]	@ (80009fc <MX_GPIO_Init+0x160>)
 8000968:	0019      	movs	r1, r3
 800096a:	0010      	movs	r0, r2
 800096c:	f001 fa9a 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUE_Pin RED_Pin GREEN_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin|RED_Pin|GREEN_Pin;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	220e      	movs	r2, #14
 8000974:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	193b      	adds	r3, r7, r4
 8000978:	2201      	movs	r2, #1
 800097a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	193b      	adds	r3, r7, r4
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	193a      	adds	r2, r7, r4
 800098a:	23a0      	movs	r3, #160	@ 0xa0
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	0011      	movs	r1, r2
 8000990:	0018      	movs	r0, r3
 8000992:	f001 fa87 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 8000996:	193b      	adds	r3, r7, r4
 8000998:	4a19      	ldr	r2, [pc, #100]	@ (8000a00 <MX_GPIO_Init+0x164>)
 800099a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2203      	movs	r2, #3
 80009a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	193a      	adds	r2, r7, r4
 80009aa:	23a0      	movs	r3, #160	@ 0xa0
 80009ac:	05db      	lsls	r3, r3, #23
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f001 fa77 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009b6:	0021      	movs	r1, r4
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2280      	movs	r2, #128	@ 0x80
 80009bc:	0052      	lsls	r2, r2, #1
 80009be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2202      	movs	r2, #2
 80009c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2202      	movs	r2, #2
 80009ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	187a      	adds	r2, r7, r1
 80009da:	23a0      	movs	r3, #160	@ 0xa0
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f001 fa5f 	bl	8001ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b009      	add	sp, #36	@ 0x24
 80009ec:	bd90      	pop	{r4, r7, pc}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	40021000 	.word	0x40021000
 80009f4:	000002ff 	.word	0x000002ff
 80009f8:	50000400 	.word	0x50000400
 80009fc:	50000800 	.word	0x50000800
 8000a00:	00009870 	.word	0x00009870

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	46c0      	nop			@ (mov r8, r8)
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a22:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	2201      	movs	r2, #1
 8000a28:	4013      	ands	r3, r2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a34:	2180      	movs	r1, #128	@ 0x80
 8000a36:	0549      	lsls	r1, r1, #21
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <HAL_MspInit+0x44>)
 8000a3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a40:	2380      	movs	r3, #128	@ 0x80
 8000a42:	055b      	lsls	r3, r3, #21
 8000a44:	4013      	ands	r3, r2
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b08b      	sub	sp, #44	@ 0x2c
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	2414      	movs	r4, #20
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	0018      	movs	r0, r3
 8000a66:	2314      	movs	r3, #20
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f003 fdfc 	bl	8004668 <memset>
  if(hadc->Instance==ADC1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a18      	ldr	r2, [pc, #96]	@ (8000ad8 <HAL_ADC_MspInit+0x80>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d129      	bne.n	8000ace <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <HAL_ADC_MspInit+0x84>)
 8000a7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <HAL_ADC_MspInit+0x84>)
 8000a80:	2180      	movs	r1, #128	@ 0x80
 8000a82:	0349      	lsls	r1, r1, #13
 8000a84:	430a      	orrs	r2, r1
 8000a86:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <HAL_ADC_MspInit+0x84>)
 8000a8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a8c:	2380      	movs	r3, #128	@ 0x80
 8000a8e:	035b      	lsls	r3, r3, #13
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <HAL_ADC_MspInit+0x84>)
 8000a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a9a:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <HAL_ADC_MspInit+0x84>)
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <HAL_ADC_MspInit+0x84>)
 8000aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	193a      	adds	r2, r7, r4
 8000ac2:	23a0      	movs	r3, #160	@ 0xa0
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f001 f9eb 	bl	8001ea4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b00b      	add	sp, #44	@ 0x2c
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	40012400 	.word	0x40012400
 8000adc:	40021000 	.word	0x40021000

08000ae0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b08b      	sub	sp, #44	@ 0x2c
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae8:	2410      	movs	r4, #16
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	0018      	movs	r0, r3
 8000aee:	2318      	movs	r3, #24
 8000af0:	001a      	movs	r2, r3
 8000af2:	2100      	movs	r1, #0
 8000af4:	f003 fdb8 	bl	8004668 <memset>
  if(hrtc->Instance==RTC)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a15      	ldr	r2, [pc, #84]	@ (8000b54 <HAL_RTC_MspInit+0x74>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d124      	bne.n	8000b4c <HAL_RTC_MspInit+0x6c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2280      	movs	r2, #128	@ 0x80
 8000b06:	0292      	lsls	r2, r2, #10
 8000b08:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	0092      	lsls	r2, r2, #2
 8000b10:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	0018      	movs	r0, r3
 8000b16:	f002 f907 	bl	8002d28 <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000b1e:	f7ff ff71 	bl	8000a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <HAL_RTC_MspInit+0x78>)
 8000b24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000b26:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <HAL_RTC_MspInit+0x78>)
 8000b28:	2180      	movs	r1, #128	@ 0x80
 8000b2a:	0209      	lsls	r1, r1, #8
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000b30:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <HAL_RTC_MspInit+0x78>)
 8000b32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <HAL_RTC_MspInit+0x78>)
 8000b36:	2180      	movs	r1, #128	@ 0x80
 8000b38:	00c9      	lsls	r1, r1, #3
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_RTC_MspInit+0x78>)
 8000b40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b42:	2380      	movs	r3, #128	@ 0x80
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4013      	ands	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000b4c:	46c0      	nop			@ (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b00b      	add	sp, #44	@ 0x2c
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	40002800 	.word	0x40002800
 8000b58:	40021000 	.word	0x40021000

08000b5c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a09      	ldr	r2, [pc, #36]	@ (8000b90 <HAL_TIM_Base_MspInit+0x34>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d10b      	bne.n	8000b86 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <HAL_TIM_Base_MspInit+0x38>)
 8000b70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <HAL_TIM_Base_MspInit+0x38>)
 8000b74:	2102      	movs	r1, #2
 8000b76:	430a      	orrs	r2, r1
 8000b78:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_TIM_Base_MspInit+0x38>)
 8000b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b7e:	2202      	movs	r2, #2
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b004      	add	sp, #16
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	40000400 	.word	0x40000400
 8000b94:	40021000 	.word	0x40021000

08000b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b089      	sub	sp, #36	@ 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	240c      	movs	r4, #12
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	2314      	movs	r3, #20
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2100      	movs	r1, #0
 8000bac:	f003 fd5c 	bl	8004668 <memset>
  if(htim->Instance==TIM3)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a14      	ldr	r2, [pc, #80]	@ (8000c08 <HAL_TIM_MspPostInit+0x70>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d122      	bne.n	8000c00 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <HAL_TIM_MspPostInit+0x74>)
 8000bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <HAL_TIM_MspPostInit+0x74>)
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <HAL_TIM_MspPostInit+0x74>)
 8000bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8000bd2:	0021      	movs	r1, r4
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2280      	movs	r2, #128	@ 0x80
 8000bd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2202      	movs	r2, #2
 8000bde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2201      	movs	r2, #1
 8000bf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	187a      	adds	r2, r7, r1
 8000bf4:	23a0      	movs	r3, #160	@ 0xa0
 8000bf6:	05db      	lsls	r3, r3, #23
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f001 f952 	bl	8001ea4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b009      	add	sp, #36	@ 0x24
 8000c06:	bd90      	pop	{r4, r7, pc}
 8000c08:	40000400 	.word	0x40000400
 8000c0c:	40021000 	.word	0x40021000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	e7fd      	b.n	8000c14 <NMI_Handler+0x4>

08000c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	e7fd      	b.n	8000c1c <HardFault_Handler+0x4>

08000c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c24:	46c0      	nop			@ (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f000 f8c0 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	46c0      	nop			@ (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000c48:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <RTC_TAMP_IRQHandler+0x14>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f002 fb7a 	bl	8003344 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	20000090 	.word	0x20000090

08000c5c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEST_Pin);
 8000c60:	2380      	movs	r3, #128	@ 0x80
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	0018      	movs	r0, r3
 8000c66:	f001 fabb 	bl	80021e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c74:	4b03      	ldr	r3, [pc, #12]	@ (8000c84 <TIM3_IRQHandler+0x14>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f002 fda0 	bl	80037bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	200000bc 	.word	0x200000bc

08000c88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	46c0      	nop			@ (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c94:	480d      	ldr	r0, [pc, #52]	@ (8000ccc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c96:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c98:	f7ff fff6 	bl	8000c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c9c:	480c      	ldr	r0, [pc, #48]	@ (8000cd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c9e:	490d      	ldr	r1, [pc, #52]	@ (8000cd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd8 <LoopForever+0xe>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce0 <LoopForever+0x16>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cc2:	f003 fcd9 	bl	8004678 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cc6:	f7ff faa7 	bl	8000218 <main>

08000cca <LoopForever>:

LoopForever:
  b LoopForever
 8000cca:	e7fe      	b.n	8000cca <LoopForever>
  ldr   r0, =_estack
 8000ccc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cd8:	08004774 	.word	0x08004774
  ldr r2, =_sbss
 8000cdc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ce0:	2000010c 	.word	0x2000010c

08000ce4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC1_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <HAL_Init+0x3c>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <HAL_Init+0x3c>)
 8000cfa:	2180      	movs	r1, #128	@ 0x80
 8000cfc:	0049      	lsls	r1, r1, #1
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d02:	2003      	movs	r0, #3
 8000d04:	f000 f810 	bl	8000d28 <HAL_InitTick>
 8000d08:	1e03      	subs	r3, r0, #0
 8000d0a:	d003      	beq.n	8000d14 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
 8000d12:	e001      	b.n	8000d18 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d14:	f7ff fe7c 	bl	8000a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	781b      	ldrb	r3, [r3, #0]
}
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40022000 	.word	0x40022000

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d30:	230f      	movs	r3, #15
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d38:	4b1d      	ldr	r3, [pc, #116]	@ (8000db0 <HAL_InitTick+0x88>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d02b      	beq.n	8000d98 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d40:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <HAL_InitTick+0x8c>)
 8000d42:	681c      	ldr	r4, [r3, #0]
 8000d44:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <HAL_InitTick+0x88>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	0019      	movs	r1, r3
 8000d4a:	23fa      	movs	r3, #250	@ 0xfa
 8000d4c:	0098      	lsls	r0, r3, #2
 8000d4e:	f7ff f9d7 	bl	8000100 <__udivsi3>
 8000d52:	0003      	movs	r3, r0
 8000d54:	0019      	movs	r1, r3
 8000d56:	0020      	movs	r0, r4
 8000d58:	f7ff f9d2 	bl	8000100 <__udivsi3>
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f001 f893 	bl	8001e8a <HAL_SYSTICK_Config>
 8000d64:	1e03      	subs	r3, r0, #0
 8000d66:	d112      	bne.n	8000d8e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d80a      	bhi.n	8000d84 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	2301      	movs	r3, #1
 8000d72:	425b      	negs	r3, r3
 8000d74:	2200      	movs	r2, #0
 8000d76:	0018      	movs	r0, r3
 8000d78:	f001 f862 	bl	8001e40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <HAL_InitTick+0x90>)
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	e00d      	b.n	8000da0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d84:	230f      	movs	r3, #15
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	2201      	movs	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]
 8000d8c:	e008      	b.n	8000da0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8e:	230f      	movs	r3, #15
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	e003      	b.n	8000da0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d98:	230f      	movs	r3, #15
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000da0:	230f      	movs	r3, #15
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	781b      	ldrb	r3, [r3, #0]
}
 8000da6:	0018      	movs	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b005      	add	sp, #20
 8000dac:	bd90      	pop	{r4, r7, pc}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc0:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <HAL_IncTick+0x1c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <HAL_IncTick+0x20>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	18d2      	adds	r2, r2, r3
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <HAL_IncTick+0x20>)
 8000dce:	601a      	str	r2, [r3, #0]
}
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000108 	.word	0x20000108

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b02      	ldr	r3, [pc, #8]	@ (8000df0 <HAL_GetTick+0x10>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	0018      	movs	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	20000108 	.word	0x20000108

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff fff0 	bl	8000de0 <HAL_GetTick>
 8000e00:	0003      	movs	r3, r0
 8000e02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	d005      	beq.n	8000e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <HAL_Delay+0x44>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	001a      	movs	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	189b      	adds	r3, r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	f7ff ffe0 	bl	8000de0 <HAL_GetTick>
 8000e20:	0002      	movs	r2, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8f7      	bhi.n	8000e1c <HAL_Delay+0x28>
  {
  }
}
 8000e2c:	46c0      	nop			@ (mov r8, r8)
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b004      	add	sp, #16
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	20000008 	.word	0x20000008

08000e3c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000e40:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <HAL_SuspendTick+0x18>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b03      	ldr	r3, [pc, #12]	@ (8000e54 <HAL_SuspendTick+0x18>)
 8000e46:	2102      	movs	r1, #2
 8000e48:	438a      	bics	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	46c0      	nop			@ (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <HAL_ResumeTick+0x18>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <HAL_ResumeTick+0x18>)
 8000e62:	2102      	movs	r1, #2
 8000e64:	430a      	orrs	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	46c0      	nop			@ (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a05      	ldr	r2, [pc, #20]	@ (8000e98 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000e84:	401a      	ands	r2, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	601a      	str	r2, [r3, #0]
}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b002      	add	sp, #8
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	fe3fffff 	.word	0xfe3fffff

08000e9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	23e0      	movs	r3, #224	@ 0xe0
 8000eaa:	045b      	lsls	r3, r3, #17
 8000eac:	4013      	ands	r3, r2
}
 8000eae:	0018      	movs	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b002      	add	sp, #8
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b084      	sub	sp, #16
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	2104      	movs	r1, #4
 8000eca:	400a      	ands	r2, r1
 8000ecc:	2107      	movs	r1, #7
 8000ece:	4091      	lsls	r1, r2
 8000ed0:	000a      	movs	r2, r1
 8000ed2:	43d2      	mvns	r2, r2
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	2104      	movs	r1, #4
 8000eda:	400b      	ands	r3, r1
 8000edc:	6879      	ldr	r1, [r7, #4]
 8000ede:	4099      	lsls	r1, r3
 8000ee0:	000b      	movs	r3, r1
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000ee8:	46c0      	nop			@ (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b004      	add	sp, #16
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	2104      	movs	r1, #4
 8000f02:	400a      	ands	r2, r1
 8000f04:	2107      	movs	r1, #7
 8000f06:	4091      	lsls	r1, r2
 8000f08:	000a      	movs	r2, r1
 8000f0a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	2104      	movs	r1, #4
 8000f10:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f12:	40da      	lsrs	r2, r3
 8000f14:	0013      	movs	r3, r2
}
 8000f16:	0018      	movs	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	23c0      	movs	r3, #192	@ 0xc0
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d101      	bne.n	8000f36 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	211f      	movs	r1, #31
 8000f54:	400a      	ands	r2, r1
 8000f56:	210f      	movs	r1, #15
 8000f58:	4091      	lsls	r1, r2
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	43d2      	mvns	r2, r2
 8000f5e:	401a      	ands	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	0e9b      	lsrs	r3, r3, #26
 8000f64:	210f      	movs	r1, #15
 8000f66:	4019      	ands	r1, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	201f      	movs	r0, #31
 8000f6c:	4003      	ands	r3, r0
 8000f6e:	4099      	lsls	r1, r3
 8000f70:	000b      	movs	r3, r1
 8000f72:	431a      	orrs	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f78:	46c0      	nop			@ (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b004      	add	sp, #16
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	035b      	lsls	r3, r3, #13
 8000f92:	0b5b      	lsrs	r3, r3, #13
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	0352      	lsls	r2, r2, #13
 8000fb4:	0b52      	lsrs	r2, r2, #13
 8000fb6:	43d2      	mvns	r2, r2
 8000fb8:	401a      	ands	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b002      	add	sp, #8
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	0212      	lsls	r2, r2, #8
 8000fdc:	43d2      	mvns	r2, r2
 8000fde:	401a      	ands	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
 8000fe8:	4904      	ldr	r1, [pc, #16]	@ (8000ffc <LL_ADC_SetChannelSamplingTime+0x34>)
 8000fea:	400b      	ands	r3, r1
 8000fec:	431a      	orrs	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b004      	add	sp, #16
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	07ffff00 	.word	0x07ffff00

08001000 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	4a05      	ldr	r2, [pc, #20]	@ (8001024 <LL_ADC_EnableInternalRegulator+0x24>)
 800100e:	4013      	ands	r3, r2
 8001010:	2280      	movs	r2, #128	@ 0x80
 8001012:	0552      	lsls	r2, r2, #21
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800101a:	46c0      	nop			@ (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	6fffffe8 	.word	0x6fffffe8

08001028 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	2380      	movs	r3, #128	@ 0x80
 8001036:	055b      	lsls	r3, r3, #21
 8001038:	401a      	ands	r2, r3
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	055b      	lsls	r3, r3, #21
 800103e:	429a      	cmp	r2, r3
 8001040:	d101      	bne.n	8001046 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001046:	2300      	movs	r3, #0
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	b002      	add	sp, #8
 800104e:	bd80      	pop	{r7, pc}

08001050 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <LL_ADC_Enable+0x20>)
 800105e:	4013      	ands	r3, r2
 8001060:	2201      	movs	r2, #1
 8001062:	431a      	orrs	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001068:	46c0      	nop			@ (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b002      	add	sp, #8
 800106e:	bd80      	pop	{r7, pc}
 8001070:	7fffffe8 	.word	0x7fffffe8

08001074 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <LL_ADC_Disable+0x20>)
 8001082:	4013      	ands	r3, r2
 8001084:	2202      	movs	r2, #2
 8001086:	431a      	orrs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800108c:	46c0      	nop			@ (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b002      	add	sp, #8
 8001092:	bd80      	pop	{r7, pc}
 8001094:	7fffffe8 	.word	0x7fffffe8

08001098 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2201      	movs	r2, #1
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <LL_ADC_IsEnabled+0x18>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <LL_ADC_IsEnabled+0x1a>
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b002      	add	sp, #8
 80010b8:	bd80      	pop	{r7, pc}

080010ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	2202      	movs	r2, #2
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d101      	bne.n	80010d2 <LL_ADC_IsDisableOngoing+0x18>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <LL_ADC_IsDisableOngoing+0x1a>
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	0018      	movs	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b002      	add	sp, #8
 80010da:	bd80      	pop	{r7, pc}

080010dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <LL_ADC_REG_StartConversion+0x20>)
 80010ea:	4013      	ands	r3, r2
 80010ec:	2204      	movs	r2, #4
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010f4:	46c0      	nop			@ (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b002      	add	sp, #8
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	7fffffe8 	.word	0x7fffffe8

08001100 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <LL_ADC_REG_StopConversion+0x20>)
 800110e:	4013      	ands	r3, r2
 8001110:	2210      	movs	r2, #16
 8001112:	431a      	orrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001118:	46c0      	nop			@ (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}
 8001120:	7fffffe8 	.word	0x7fffffe8

08001124 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2204      	movs	r2, #4
 8001132:	4013      	ands	r3, r2
 8001134:	2b04      	cmp	r3, #4
 8001136:	d101      	bne.n	800113c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800113c:	2300      	movs	r3, #0
}
 800113e:	0018      	movs	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	b002      	add	sp, #8
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001150:	231f      	movs	r3, #31
 8001152:	18fb      	adds	r3, r7, r3
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e17f      	b.n	800146e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10a      	bne.n	800118c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff fc6d 	bl	8000a58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2254      	movs	r2, #84	@ 0x54
 8001188:	2100      	movs	r1, #0
 800118a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff ff49 	bl	8001028 <LL_ADC_IsInternalRegulatorEnabled>
 8001196:	1e03      	subs	r3, r0, #0
 8001198:	d115      	bne.n	80011c6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	0018      	movs	r0, r3
 80011a0:	f7ff ff2e 	bl	8001000 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011a4:	4bb4      	ldr	r3, [pc, #720]	@ (8001478 <HAL_ADC_Init+0x330>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	49b4      	ldr	r1, [pc, #720]	@ (800147c <HAL_ADC_Init+0x334>)
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7fe ffa8 	bl	8000100 <__udivsi3>
 80011b0:	0003      	movs	r3, r0
 80011b2:	3301      	adds	r3, #1
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011b8:	e002      	b.n	80011c0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3b01      	subs	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f9      	bne.n	80011ba <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	0018      	movs	r0, r3
 80011cc:	f7ff ff2c 	bl	8001028 <LL_ADC_IsInternalRegulatorEnabled>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d10f      	bne.n	80011f4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d8:	2210      	movs	r2, #16
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011e4:	2201      	movs	r2, #1
 80011e6:	431a      	orrs	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80011ec:	231f      	movs	r3, #31
 80011ee:	18fb      	adds	r3, r7, r3
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	0018      	movs	r0, r3
 80011fa:	f7ff ff93 	bl	8001124 <LL_ADC_REG_IsConversionOngoing>
 80011fe:	0003      	movs	r3, r0
 8001200:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001206:	2210      	movs	r2, #16
 8001208:	4013      	ands	r3, r2
 800120a:	d000      	beq.n	800120e <HAL_ADC_Init+0xc6>
 800120c:	e122      	b.n	8001454 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d000      	beq.n	8001216 <HAL_ADC_Init+0xce>
 8001214:	e11e      	b.n	8001454 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121a:	4a99      	ldr	r2, [pc, #612]	@ (8001480 <HAL_ADC_Init+0x338>)
 800121c:	4013      	ands	r3, r2
 800121e:	2202      	movs	r2, #2
 8001220:	431a      	orrs	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	0018      	movs	r0, r3
 800122c:	f7ff ff34 	bl	8001098 <LL_ADC_IsEnabled>
 8001230:	1e03      	subs	r3, r0, #0
 8001232:	d000      	beq.n	8001236 <HAL_ADC_Init+0xee>
 8001234:	e0ad      	b.n	8001392 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7e1b      	ldrb	r3, [r3, #24]
 800123e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001240:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7e5b      	ldrb	r3, [r3, #25]
 8001246:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001248:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7e9b      	ldrb	r3, [r3, #26]
 800124e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001250:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <HAL_ADC_Init+0x118>
 800125a:	2380      	movs	r3, #128	@ 0x80
 800125c:	015b      	lsls	r3, r3, #5
 800125e:	e000      	b.n	8001262 <HAL_ADC_Init+0x11a>
 8001260:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001262:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001268:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	2b00      	cmp	r3, #0
 8001270:	da04      	bge.n	800127c <HAL_ADC_Init+0x134>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	085b      	lsrs	r3, r3, #1
 800127a:	e001      	b.n	8001280 <HAL_ADC_Init+0x138>
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001280:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	212c      	movs	r1, #44	@ 0x2c
 8001286:	5c5b      	ldrb	r3, [r3, r1]
 8001288:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800128a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2220      	movs	r2, #32
 8001296:	5c9b      	ldrb	r3, [r3, r2]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d115      	bne.n	80012c8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7e9b      	ldrb	r3, [r3, #26]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d105      	bne.n	80012b0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	2280      	movs	r2, #128	@ 0x80
 80012a8:	0252      	lsls	r2, r2, #9
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	e00b      	b.n	80012c8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b4:	2220      	movs	r2, #32
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012c0:	2201      	movs	r2, #1
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00a      	beq.n	80012e6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012d4:	23e0      	movs	r3, #224	@ 0xe0
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80012de:	4313      	orrs	r3, r2
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4a65      	ldr	r2, [pc, #404]	@ (8001484 <HAL_ADC_Init+0x33c>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	0019      	movs	r1, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	0f9b      	lsrs	r3, r3, #30
 8001302:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001308:	4313      	orrs	r3, r2
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4313      	orrs	r3, r2
 800130e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	223c      	movs	r2, #60	@ 0x3c
 8001314:	5c9b      	ldrb	r3, [r3, r2]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d111      	bne.n	800133e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	0f9b      	lsrs	r3, r3, #30
 8001320:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001326:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800132c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001332:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	4313      	orrs	r3, r2
 8001338:	2201      	movs	r2, #1
 800133a:	4313      	orrs	r3, r2
 800133c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	4a50      	ldr	r2, [pc, #320]	@ (8001488 <HAL_ADC_Init+0x340>)
 8001346:	4013      	ands	r3, r2
 8001348:	0019      	movs	r1, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	430a      	orrs	r2, r1
 8001352:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	23c0      	movs	r3, #192	@ 0xc0
 800135a:	061b      	lsls	r3, r3, #24
 800135c:	429a      	cmp	r2, r3
 800135e:	d018      	beq.n	8001392 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001364:	2380      	movs	r3, #128	@ 0x80
 8001366:	05db      	lsls	r3, r3, #23
 8001368:	429a      	cmp	r2, r3
 800136a:	d012      	beq.n	8001392 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	061b      	lsls	r3, r3, #24
 8001374:	429a      	cmp	r2, r3
 8001376:	d00c      	beq.n	8001392 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001378:	4b44      	ldr	r3, [pc, #272]	@ (800148c <HAL_ADC_Init+0x344>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a44      	ldr	r2, [pc, #272]	@ (8001490 <HAL_ADC_Init+0x348>)
 800137e:	4013      	ands	r3, r2
 8001380:	0019      	movs	r1, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	23f0      	movs	r3, #240	@ 0xf0
 8001388:	039b      	lsls	r3, r3, #14
 800138a:	401a      	ands	r2, r3
 800138c:	4b3f      	ldr	r3, [pc, #252]	@ (800148c <HAL_ADC_Init+0x344>)
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800139a:	001a      	movs	r2, r3
 800139c:	2100      	movs	r1, #0
 800139e:	f7ff fd8a 	bl	8000eb6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013aa:	493a      	ldr	r1, [pc, #232]	@ (8001494 <HAL_ADC_Init+0x34c>)
 80013ac:	001a      	movs	r2, r3
 80013ae:	f7ff fd82 	bl	8000eb6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2110      	movs	r1, #16
 80013c6:	4249      	negs	r1, r1
 80013c8:	430a      	orrs	r2, r1
 80013ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80013cc:	e018      	b.n	8001400 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691a      	ldr	r2, [r3, #16]
 80013d2:	2380      	movs	r3, #128	@ 0x80
 80013d4:	039b      	lsls	r3, r3, #14
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d112      	bne.n	8001400 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	221c      	movs	r2, #28
 80013ea:	4013      	ands	r3, r2
 80013ec:	2210      	movs	r2, #16
 80013ee:	4252      	negs	r2, r2
 80013f0:	409a      	lsls	r2, r3
 80013f2:	0011      	movs	r1, r2
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2100      	movs	r1, #0
 8001406:	0018      	movs	r0, r3
 8001408:	f7ff fd72 	bl	8000ef0 <LL_ADC_GetSamplingTimeCommonChannels>
 800140c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001412:	429a      	cmp	r2, r3
 8001414:	d10b      	bne.n	800142e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001420:	2203      	movs	r2, #3
 8001422:	4393      	bics	r3, r2
 8001424:	2201      	movs	r2, #1
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800142c:	e01c      	b.n	8001468 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001432:	2212      	movs	r2, #18
 8001434:	4393      	bics	r3, r2
 8001436:	2210      	movs	r2, #16
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001442:	2201      	movs	r2, #1
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800144a:	231f      	movs	r3, #31
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001452:	e009      	b.n	8001468 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001458:	2210      	movs	r2, #16
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001460:	231f      	movs	r3, #31
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001468:	231f      	movs	r3, #31
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	781b      	ldrb	r3, [r3, #0]
}
 800146e:	0018      	movs	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	b008      	add	sp, #32
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	20000000 	.word	0x20000000
 800147c:	00030d40 	.word	0x00030d40
 8001480:	fffffefd 	.word	0xfffffefd
 8001484:	ffde0201 	.word	0xffde0201
 8001488:	1ffffc02 	.word	0x1ffffc02
 800148c:	40012708 	.word	0x40012708
 8001490:	ffc3ffff 	.word	0xffc3ffff
 8001494:	07ffff04 	.word	0x07ffff04

08001498 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7ff fe3d 	bl	8001124 <LL_ADC_REG_IsConversionOngoing>
 80014aa:	1e03      	subs	r3, r0, #0
 80014ac:	d135      	bne.n	800151a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2254      	movs	r2, #84	@ 0x54
 80014b2:	5c9b      	ldrb	r3, [r3, r2]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d101      	bne.n	80014bc <HAL_ADC_Start+0x24>
 80014b8:	2302      	movs	r3, #2
 80014ba:	e035      	b.n	8001528 <HAL_ADC_Start+0x90>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2254      	movs	r2, #84	@ 0x54
 80014c0:	2101      	movs	r1, #1
 80014c2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014c4:	250f      	movs	r5, #15
 80014c6:	197c      	adds	r4, r7, r5
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	0018      	movs	r0, r3
 80014cc:	f000 fb28 	bl	8001b20 <ADC_Enable>
 80014d0:	0003      	movs	r3, r0
 80014d2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014d4:	197b      	adds	r3, r7, r5
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d119      	bne.n	8001510 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e0:	4a13      	ldr	r2, [pc, #76]	@ (8001530 <HAL_ADC_Start+0x98>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	0052      	lsls	r2, r2, #1
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	221c      	movs	r2, #28
 80014fa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2254      	movs	r2, #84	@ 0x54
 8001500:	2100      	movs	r1, #0
 8001502:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff fde7 	bl	80010dc <LL_ADC_REG_StartConversion>
 800150e:	e008      	b.n	8001522 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2254      	movs	r2, #84	@ 0x54
 8001514:	2100      	movs	r1, #0
 8001516:	5499      	strb	r1, [r3, r2]
 8001518:	e003      	b.n	8001522 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800151a:	230f      	movs	r3, #15
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	2202      	movs	r2, #2
 8001520:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001522:	230f      	movs	r3, #15
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	781b      	ldrb	r3, [r3, #0]
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b004      	add	sp, #16
 800152e:	bdb0      	pop	{r4, r5, r7, pc}
 8001530:	fffff0fe 	.word	0xfffff0fe

08001534 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001534:	b5b0      	push	{r4, r5, r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2254      	movs	r2, #84	@ 0x54
 8001540:	5c9b      	ldrb	r3, [r3, r2]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_ADC_Stop+0x16>
 8001546:	2302      	movs	r3, #2
 8001548:	e029      	b.n	800159e <HAL_ADC_Stop+0x6a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2254      	movs	r2, #84	@ 0x54
 800154e:	2101      	movs	r1, #1
 8001550:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001552:	250f      	movs	r5, #15
 8001554:	197c      	adds	r4, r7, r5
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	0018      	movs	r0, r3
 800155a:	f000 fa9f 	bl	8001a9c <ADC_ConversionStop>
 800155e:	0003      	movs	r3, r0
 8001560:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001562:	197b      	adds	r3, r7, r5
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d112      	bne.n	8001590 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800156a:	197c      	adds	r4, r7, r5
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	0018      	movs	r0, r3
 8001570:	f000 fb5c 	bl	8001c2c <ADC_Disable>
 8001574:	0003      	movs	r3, r0
 8001576:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001578:	197b      	adds	r3, r7, r5
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d107      	bne.n	8001590 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001584:	4a08      	ldr	r2, [pc, #32]	@ (80015a8 <HAL_ADC_Stop+0x74>)
 8001586:	4013      	ands	r3, r2
 8001588:	2201      	movs	r2, #1
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2254      	movs	r2, #84	@ 0x54
 8001594:	2100      	movs	r1, #0
 8001596:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001598:	230f      	movs	r3, #15
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	781b      	ldrb	r3, [r3, #0]
}
 800159e:	0018      	movs	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b004      	add	sp, #16
 80015a4:	bdb0      	pop	{r4, r5, r7, pc}
 80015a6:	46c0      	nop			@ (mov r8, r8)
 80015a8:	fffffefe 	.word	0xfffffefe

080015ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d102      	bne.n	80015c4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80015be:	2308      	movs	r3, #8
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	e00f      	b.n	80015e4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	2201      	movs	r2, #1
 80015cc:	4013      	ands	r3, r2
 80015ce:	d007      	beq.n	80015e0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d4:	2220      	movs	r2, #32
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e072      	b.n	80016c6 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80015e0:	2304      	movs	r3, #4
 80015e2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80015e4:	f7ff fbfc 	bl	8000de0 <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80015ec:	e01f      	b.n	800162e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	d01c      	beq.n	800162e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80015f4:	f7ff fbf4 	bl	8000de0 <HAL_GetTick>
 80015f8:	0002      	movs	r2, r0
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d302      	bcc.n	800160a <HAL_ADC_PollForConversion+0x5e>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d111      	bne.n	800162e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	4013      	ands	r3, r2
 8001614:	d10b      	bne.n	800162e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161a:	2204      	movs	r2, #4
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2254      	movs	r2, #84	@ 0x54
 8001626:	2100      	movs	r1, #0
 8001628:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e04b      	b.n	80016c6 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4013      	ands	r3, r2
 8001638:	d0d9      	beq.n	80015ee <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	2280      	movs	r2, #128	@ 0x80
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	0018      	movs	r0, r3
 800164e:	f7ff fc66 	bl	8000f1e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001652:	1e03      	subs	r3, r0, #0
 8001654:	d02e      	beq.n	80016b4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7e9b      	ldrb	r3, [r3, #26]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d12a      	bne.n	80016b4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2208      	movs	r2, #8
 8001666:	4013      	ands	r3, r2
 8001668:	2b08      	cmp	r3, #8
 800166a:	d123      	bne.n	80016b4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0018      	movs	r0, r3
 8001672:	f7ff fd57 	bl	8001124 <LL_ADC_REG_IsConversionOngoing>
 8001676:	1e03      	subs	r3, r0, #0
 8001678:	d110      	bne.n	800169c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	210c      	movs	r1, #12
 8001686:	438a      	bics	r2, r1
 8001688:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168e:	4a10      	ldr	r2, [pc, #64]	@ (80016d0 <HAL_ADC_PollForConversion+0x124>)
 8001690:	4013      	ands	r3, r2
 8001692:	2201      	movs	r2, #1
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	659a      	str	r2, [r3, #88]	@ 0x58
 800169a:	e00b      	b.n	80016b4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a0:	2220      	movs	r2, #32
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ac:	2201      	movs	r2, #1
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7e1b      	ldrb	r3, [r3, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d103      	bne.n	80016c4 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	220c      	movs	r2, #12
 80016c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	0018      	movs	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b004      	add	sp, #16
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			@ (mov r8, r8)
 80016d0:	fffffefe 	.word	0xfffffefe

080016d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80016e2:	0018      	movs	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b002      	add	sp, #8
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f6:	2317      	movs	r3, #23
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2254      	movs	r2, #84	@ 0x54
 8001706:	5c9b      	ldrb	r3, [r3, r2]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x24>
 800170c:	2302      	movs	r3, #2
 800170e:	e1c0      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x3a6>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2254      	movs	r2, #84	@ 0x54
 8001714:	2101      	movs	r1, #1
 8001716:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff fd01 	bl	8001124 <LL_ADC_REG_IsConversionOngoing>
 8001722:	1e03      	subs	r3, r0, #0
 8001724:	d000      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x3c>
 8001726:	e1a3      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d100      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x46>
 8001730:	e143      	b.n	80019ba <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	429a      	cmp	r2, r3
 800173c:	d004      	beq.n	8001748 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001742:	4ac1      	ldr	r2, [pc, #772]	@ (8001a48 <HAL_ADC_ConfigChannel+0x35c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d108      	bne.n	800175a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0019      	movs	r1, r3
 8001752:	0010      	movs	r0, r2
 8001754:	f7ff fc14 	bl	8000f80 <LL_ADC_REG_SetSequencerChAdd>
 8001758:	e0c9      	b.n	80018ee <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	211f      	movs	r1, #31
 8001764:	400b      	ands	r3, r1
 8001766:	210f      	movs	r1, #15
 8001768:	4099      	lsls	r1, r3
 800176a:	000b      	movs	r3, r1
 800176c:	43db      	mvns	r3, r3
 800176e:	4013      	ands	r3, r2
 8001770:	0019      	movs	r1, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	035b      	lsls	r3, r3, #13
 8001778:	0b5b      	lsrs	r3, r3, #13
 800177a:	d105      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x9c>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	0e9b      	lsrs	r3, r3, #26
 8001782:	221f      	movs	r2, #31
 8001784:	4013      	ands	r3, r2
 8001786:	e098      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2201      	movs	r2, #1
 800178e:	4013      	ands	r3, r2
 8001790:	d000      	beq.n	8001794 <HAL_ADC_ConfigChannel+0xa8>
 8001792:	e091      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x1cc>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2202      	movs	r2, #2
 800179a:	4013      	ands	r3, r2
 800179c:	d000      	beq.n	80017a0 <HAL_ADC_ConfigChannel+0xb4>
 800179e:	e089      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x1c8>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2204      	movs	r2, #4
 80017a6:	4013      	ands	r3, r2
 80017a8:	d000      	beq.n	80017ac <HAL_ADC_ConfigChannel+0xc0>
 80017aa:	e081      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x1c4>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2208      	movs	r2, #8
 80017b2:	4013      	ands	r3, r2
 80017b4:	d000      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0xcc>
 80017b6:	e079      	b.n	80018ac <HAL_ADC_ConfigChannel+0x1c0>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2210      	movs	r2, #16
 80017be:	4013      	ands	r3, r2
 80017c0:	d000      	beq.n	80017c4 <HAL_ADC_ConfigChannel+0xd8>
 80017c2:	e071      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x1bc>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2220      	movs	r2, #32
 80017ca:	4013      	ands	r3, r2
 80017cc:	d000      	beq.n	80017d0 <HAL_ADC_ConfigChannel+0xe4>
 80017ce:	e069      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x1b8>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2240      	movs	r2, #64	@ 0x40
 80017d6:	4013      	ands	r3, r2
 80017d8:	d000      	beq.n	80017dc <HAL_ADC_ConfigChannel+0xf0>
 80017da:	e061      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x1b4>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2280      	movs	r2, #128	@ 0x80
 80017e2:	4013      	ands	r3, r2
 80017e4:	d000      	beq.n	80017e8 <HAL_ADC_ConfigChannel+0xfc>
 80017e6:	e059      	b.n	800189c <HAL_ADC_ConfigChannel+0x1b0>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4013      	ands	r3, r2
 80017f2:	d151      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x1ac>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	@ 0x80
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4013      	ands	r3, r2
 80017fe:	d149      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1a8>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	2380      	movs	r3, #128	@ 0x80
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4013      	ands	r3, r2
 800180a:	d141      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x1a4>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2380      	movs	r3, #128	@ 0x80
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	4013      	ands	r3, r2
 8001816:	d139      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1a0>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	015b      	lsls	r3, r3, #5
 8001820:	4013      	ands	r3, r2
 8001822:	d131      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x19c>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2380      	movs	r3, #128	@ 0x80
 800182a:	019b      	lsls	r3, r3, #6
 800182c:	4013      	ands	r3, r2
 800182e:	d129      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x198>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2380      	movs	r3, #128	@ 0x80
 8001836:	01db      	lsls	r3, r3, #7
 8001838:	4013      	ands	r3, r2
 800183a:	d121      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x194>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	2380      	movs	r3, #128	@ 0x80
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	4013      	ands	r3, r2
 8001846:	d119      	bne.n	800187c <HAL_ADC_ConfigChannel+0x190>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2380      	movs	r3, #128	@ 0x80
 800184e:	025b      	lsls	r3, r3, #9
 8001850:	4013      	ands	r3, r2
 8001852:	d111      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x18c>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2380      	movs	r3, #128	@ 0x80
 800185a:	029b      	lsls	r3, r3, #10
 800185c:	4013      	ands	r3, r2
 800185e:	d109      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x188>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2380      	movs	r3, #128	@ 0x80
 8001866:	02db      	lsls	r3, r3, #11
 8001868:	4013      	ands	r3, r2
 800186a:	d001      	beq.n	8001870 <HAL_ADC_ConfigChannel+0x184>
 800186c:	2312      	movs	r3, #18
 800186e:	e024      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001870:	2300      	movs	r3, #0
 8001872:	e022      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001874:	2311      	movs	r3, #17
 8001876:	e020      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001878:	2310      	movs	r3, #16
 800187a:	e01e      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 800187c:	230f      	movs	r3, #15
 800187e:	e01c      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001880:	230e      	movs	r3, #14
 8001882:	e01a      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001884:	230d      	movs	r3, #13
 8001886:	e018      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001888:	230c      	movs	r3, #12
 800188a:	e016      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 800188c:	230b      	movs	r3, #11
 800188e:	e014      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001890:	230a      	movs	r3, #10
 8001892:	e012      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001894:	2309      	movs	r3, #9
 8001896:	e010      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001898:	2308      	movs	r3, #8
 800189a:	e00e      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 800189c:	2307      	movs	r3, #7
 800189e:	e00c      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 80018a0:	2306      	movs	r3, #6
 80018a2:	e00a      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 80018a4:	2305      	movs	r3, #5
 80018a6:	e008      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 80018a8:	2304      	movs	r3, #4
 80018aa:	e006      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 80018ac:	2303      	movs	r3, #3
 80018ae:	e004      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e002      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 80018b8:	2300      	movs	r3, #0
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	6852      	ldr	r2, [r2, #4]
 80018be:	201f      	movs	r0, #31
 80018c0:	4002      	ands	r2, r0
 80018c2:	4093      	lsls	r3, r2
 80018c4:	000a      	movs	r2, r1
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d808      	bhi.n	80018ee <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	6859      	ldr	r1, [r3, #4]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	001a      	movs	r2, r3
 80018ea:	f7ff fb29 	bl	8000f40 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	001a      	movs	r2, r3
 80018fc:	f7ff fb64 	bl	8000fc8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db00      	blt.n	800190a <HAL_ADC_ConfigChannel+0x21e>
 8001908:	e0bc      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800190a:	4b50      	ldr	r3, [pc, #320]	@ (8001a4c <HAL_ADC_ConfigChannel+0x360>)
 800190c:	0018      	movs	r0, r3
 800190e:	f7ff fac5 	bl	8000e9c <LL_ADC_GetCommonPathInternalCh>
 8001912:	0003      	movs	r3, r0
 8001914:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a4d      	ldr	r2, [pc, #308]	@ (8001a50 <HAL_ADC_ConfigChannel+0x364>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d122      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	2380      	movs	r3, #128	@ 0x80
 8001924:	041b      	lsls	r3, r3, #16
 8001926:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001928:	d11d      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2280      	movs	r2, #128	@ 0x80
 800192e:	0412      	lsls	r2, r2, #16
 8001930:	4313      	orrs	r3, r2
 8001932:	4a46      	ldr	r2, [pc, #280]	@ (8001a4c <HAL_ADC_ConfigChannel+0x360>)
 8001934:	0019      	movs	r1, r3
 8001936:	0010      	movs	r0, r2
 8001938:	f7ff fa9c 	bl	8000e74 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800193c:	4b45      	ldr	r3, [pc, #276]	@ (8001a54 <HAL_ADC_ConfigChannel+0x368>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4945      	ldr	r1, [pc, #276]	@ (8001a58 <HAL_ADC_ConfigChannel+0x36c>)
 8001942:	0018      	movs	r0, r3
 8001944:	f7fe fbdc 	bl	8000100 <__udivsi3>
 8001948:	0003      	movs	r3, r0
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	0013      	movs	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	189b      	adds	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001956:	e002      	b.n	800195e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3b01      	subs	r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f9      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001964:	e08e      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a3c      	ldr	r2, [pc, #240]	@ (8001a5c <HAL_ADC_ConfigChannel+0x370>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d10e      	bne.n	800198e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	2380      	movs	r3, #128	@ 0x80
 8001974:	045b      	lsls	r3, r3, #17
 8001976:	4013      	ands	r3, r2
 8001978:	d109      	bne.n	800198e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2280      	movs	r2, #128	@ 0x80
 800197e:	0452      	lsls	r2, r2, #17
 8001980:	4313      	orrs	r3, r2
 8001982:	4a32      	ldr	r2, [pc, #200]	@ (8001a4c <HAL_ADC_ConfigChannel+0x360>)
 8001984:	0019      	movs	r1, r3
 8001986:	0010      	movs	r0, r2
 8001988:	f7ff fa74 	bl	8000e74 <LL_ADC_SetCommonPathInternalCh>
 800198c:	e07a      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a33      	ldr	r2, [pc, #204]	@ (8001a60 <HAL_ADC_ConfigChannel+0x374>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d000      	beq.n	800199a <HAL_ADC_ConfigChannel+0x2ae>
 8001998:	e074      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	2380      	movs	r3, #128	@ 0x80
 800199e:	03db      	lsls	r3, r3, #15
 80019a0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80019a2:	d000      	beq.n	80019a6 <HAL_ADC_ConfigChannel+0x2ba>
 80019a4:	e06e      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	2280      	movs	r2, #128	@ 0x80
 80019aa:	03d2      	lsls	r2, r2, #15
 80019ac:	4313      	orrs	r3, r2
 80019ae:	4a27      	ldr	r2, [pc, #156]	@ (8001a4c <HAL_ADC_ConfigChannel+0x360>)
 80019b0:	0019      	movs	r1, r3
 80019b2:	0010      	movs	r0, r2
 80019b4:	f7ff fa5e 	bl	8000e74 <LL_ADC_SetCommonPathInternalCh>
 80019b8:	e064      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	2380      	movs	r3, #128	@ 0x80
 80019c0:	061b      	lsls	r3, r3, #24
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d004      	beq.n	80019d0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001a48 <HAL_ADC_ConfigChannel+0x35c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d107      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	0019      	movs	r1, r3
 80019da:	0010      	movs	r0, r2
 80019dc:	f7ff fae1 	bl	8000fa2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da4d      	bge.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019e8:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <HAL_ADC_ConfigChannel+0x360>)
 80019ea:	0018      	movs	r0, r3
 80019ec:	f7ff fa56 	bl	8000e9c <LL_ADC_GetCommonPathInternalCh>
 80019f0:	0003      	movs	r3, r0
 80019f2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a15      	ldr	r2, [pc, #84]	@ (8001a50 <HAL_ADC_ConfigChannel+0x364>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d108      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4a18      	ldr	r2, [pc, #96]	@ (8001a64 <HAL_ADC_ConfigChannel+0x378>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	4a11      	ldr	r2, [pc, #68]	@ (8001a4c <HAL_ADC_ConfigChannel+0x360>)
 8001a06:	0019      	movs	r1, r3
 8001a08:	0010      	movs	r0, r2
 8001a0a:	f7ff fa33 	bl	8000e74 <LL_ADC_SetCommonPathInternalCh>
 8001a0e:	e039      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a11      	ldr	r2, [pc, #68]	@ (8001a5c <HAL_ADC_ConfigChannel+0x370>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d108      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4a12      	ldr	r2, [pc, #72]	@ (8001a68 <HAL_ADC_ConfigChannel+0x37c>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <HAL_ADC_ConfigChannel+0x360>)
 8001a22:	0019      	movs	r1, r3
 8001a24:	0010      	movs	r0, r2
 8001a26:	f7ff fa25 	bl	8000e74 <LL_ADC_SetCommonPathInternalCh>
 8001a2a:	e02b      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0b      	ldr	r2, [pc, #44]	@ (8001a60 <HAL_ADC_ConfigChannel+0x374>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d126      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4a0c      	ldr	r2, [pc, #48]	@ (8001a6c <HAL_ADC_ConfigChannel+0x380>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	4a03      	ldr	r2, [pc, #12]	@ (8001a4c <HAL_ADC_ConfigChannel+0x360>)
 8001a3e:	0019      	movs	r1, r3
 8001a40:	0010      	movs	r0, r2
 8001a42:	f7ff fa17 	bl	8000e74 <LL_ADC_SetCommonPathInternalCh>
 8001a46:	e01d      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x398>
 8001a48:	80000004 	.word	0x80000004
 8001a4c:	40012708 	.word	0x40012708
 8001a50:	b0001000 	.word	0xb0001000
 8001a54:	20000000 	.word	0x20000000
 8001a58:	00030d40 	.word	0x00030d40
 8001a5c:	b8004000 	.word	0xb8004000
 8001a60:	b4002000 	.word	0xb4002000
 8001a64:	ff7fffff 	.word	0xff7fffff
 8001a68:	feffffff 	.word	0xfeffffff
 8001a6c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a74:	2220      	movs	r2, #32
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a7c:	2317      	movs	r3, #23
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2254      	movs	r2, #84	@ 0x54
 8001a88:	2100      	movs	r1, #0
 8001a8a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001a8c:	2317      	movs	r3, #23
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	781b      	ldrb	r3, [r3, #0]
}
 8001a92:	0018      	movs	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b006      	add	sp, #24
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			@ (mov r8, r8)

08001a9c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7ff fb3b 	bl	8001124 <LL_ADC_REG_IsConversionOngoing>
 8001aae:	1e03      	subs	r3, r0, #0
 8001ab0:	d031      	beq.n	8001b16 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f7ff faff 	bl	80010ba <LL_ADC_IsDisableOngoing>
 8001abc:	1e03      	subs	r3, r0, #0
 8001abe:	d104      	bne.n	8001aca <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f7ff fb1b 	bl	8001100 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001aca:	f7ff f989 	bl	8000de0 <HAL_GetTick>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001ad2:	e01a      	b.n	8001b0a <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001ad4:	f7ff f984 	bl	8000de0 <HAL_GetTick>
 8001ad8:	0002      	movs	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d913      	bls.n	8001b0a <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2204      	movs	r2, #4
 8001aea:	4013      	ands	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af2:	2210      	movs	r2, #16
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afe:	2201      	movs	r2, #1
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e006      	b.n	8001b18 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2204      	movs	r2, #4
 8001b12:	4013      	ands	r3, r2
 8001b14:	d1de      	bne.n	8001ad4 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b004      	add	sp, #16
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f7ff fab1 	bl	8001098 <LL_ADC_IsEnabled>
 8001b36:	1e03      	subs	r3, r0, #0
 8001b38:	d000      	beq.n	8001b3c <ADC_Enable+0x1c>
 8001b3a:	e069      	b.n	8001c10 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	4a36      	ldr	r2, [pc, #216]	@ (8001c1c <ADC_Enable+0xfc>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	d00d      	beq.n	8001b64 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b58:	2201      	movs	r2, #1
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e056      	b.n	8001c12 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f7ff fa71 	bl	8001050 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c20 <ADC_Enable+0x100>)
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7ff f993 	bl	8000e9c <LL_ADC_GetCommonPathInternalCh>
 8001b76:	0002      	movs	r2, r0
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	041b      	lsls	r3, r3, #16
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d00f      	beq.n	8001ba0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b80:	4b28      	ldr	r3, [pc, #160]	@ (8001c24 <ADC_Enable+0x104>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4928      	ldr	r1, [pc, #160]	@ (8001c28 <ADC_Enable+0x108>)
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7fe faba 	bl	8000100 <__udivsi3>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001b90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b92:	e002      	b.n	8001b9a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f9      	bne.n	8001b94 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7e5b      	ldrb	r3, [r3, #25]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d033      	beq.n	8001c10 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001ba8:	f7ff f91a 	bl	8000de0 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bb0:	e027      	b.n	8001c02 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f7ff fa6e 	bl	8001098 <LL_ADC_IsEnabled>
 8001bbc:	1e03      	subs	r3, r0, #0
 8001bbe:	d104      	bne.n	8001bca <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff fa43 	bl	8001050 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bca:	f7ff f909 	bl	8000de0 <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d914      	bls.n	8001c02 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d00d      	beq.n	8001c02 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bea:	2210      	movs	r2, #16
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e007      	b.n	8001c12 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d1d0      	bne.n	8001bb2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	0018      	movs	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b004      	add	sp, #16
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			@ (mov r8, r8)
 8001c1c:	80000017 	.word	0x80000017
 8001c20:	40012708 	.word	0x40012708
 8001c24:	20000000 	.word	0x20000000
 8001c28:	00030d40 	.word	0x00030d40

08001c2c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7ff fa3e 	bl	80010ba <LL_ADC_IsDisableOngoing>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	0018      	movs	r0, r3
 8001c48:	f7ff fa26 	bl	8001098 <LL_ADC_IsEnabled>
 8001c4c:	1e03      	subs	r3, r0, #0
 8001c4e:	d046      	beq.n	8001cde <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d143      	bne.n	8001cde <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2205      	movs	r2, #5
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d10d      	bne.n	8001c80 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7ff fa03 	bl	8001074 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2203      	movs	r2, #3
 8001c74:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c76:	f7ff f8b3 	bl	8000de0 <HAL_GetTick>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001c7e:	e028      	b.n	8001cd2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c84:	2210      	movs	r2, #16
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c90:	2201      	movs	r2, #1
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e021      	b.n	8001ce0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c9c:	f7ff f8a0 	bl	8000de0 <HAL_GetTick>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d913      	bls.n	8001cd2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d00d      	beq.n	8001cd2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cba:	2210      	movs	r2, #16
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e006      	b.n	8001ce0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d1de      	bne.n	8001c9c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b004      	add	sp, #16
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	0002      	movs	r2, r0
 8001cf0:	1dfb      	adds	r3, r7, #7
 8001cf2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	1dfb      	adds	r3, r7, #7
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cfa:	d809      	bhi.n	8001d10 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfc:	1dfb      	adds	r3, r7, #7
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	001a      	movs	r2, r3
 8001d02:	231f      	movs	r3, #31
 8001d04:	401a      	ands	r2, r3
 8001d06:	4b04      	ldr	r3, [pc, #16]	@ (8001d18 <__NVIC_EnableIRQ+0x30>)
 8001d08:	2101      	movs	r1, #1
 8001d0a:	4091      	lsls	r1, r2
 8001d0c:	000a      	movs	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001d10:	46c0      	nop			@ (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b002      	add	sp, #8
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b590      	push	{r4, r7, lr}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	0002      	movs	r2, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	1dfb      	adds	r3, r7, #7
 8001d28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	1dfb      	adds	r3, r7, #7
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d30:	d828      	bhi.n	8001d84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d32:	4a2f      	ldr	r2, [pc, #188]	@ (8001df0 <__NVIC_SetPriority+0xd4>)
 8001d34:	1dfb      	adds	r3, r7, #7
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	33c0      	adds	r3, #192	@ 0xc0
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	589b      	ldr	r3, [r3, r2]
 8001d42:	1dfa      	adds	r2, r7, #7
 8001d44:	7812      	ldrb	r2, [r2, #0]
 8001d46:	0011      	movs	r1, r2
 8001d48:	2203      	movs	r2, #3
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	00d2      	lsls	r2, r2, #3
 8001d4e:	21ff      	movs	r1, #255	@ 0xff
 8001d50:	4091      	lsls	r1, r2
 8001d52:	000a      	movs	r2, r1
 8001d54:	43d2      	mvns	r2, r2
 8001d56:	401a      	ands	r2, r3
 8001d58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	019b      	lsls	r3, r3, #6
 8001d5e:	22ff      	movs	r2, #255	@ 0xff
 8001d60:	401a      	ands	r2, r3
 8001d62:	1dfb      	adds	r3, r7, #7
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	0018      	movs	r0, r3
 8001d68:	2303      	movs	r3, #3
 8001d6a:	4003      	ands	r3, r0
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d70:	481f      	ldr	r0, [pc, #124]	@ (8001df0 <__NVIC_SetPriority+0xd4>)
 8001d72:	1dfb      	adds	r3, r7, #7
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	b25b      	sxtb	r3, r3
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	33c0      	adds	r3, #192	@ 0xc0
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d82:	e031      	b.n	8001de8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d84:	4a1b      	ldr	r2, [pc, #108]	@ (8001df4 <__NVIC_SetPriority+0xd8>)
 8001d86:	1dfb      	adds	r3, r7, #7
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	0019      	movs	r1, r3
 8001d8c:	230f      	movs	r3, #15
 8001d8e:	400b      	ands	r3, r1
 8001d90:	3b08      	subs	r3, #8
 8001d92:	089b      	lsrs	r3, r3, #2
 8001d94:	3306      	adds	r3, #6
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	18d3      	adds	r3, r2, r3
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	1dfa      	adds	r2, r7, #7
 8001da0:	7812      	ldrb	r2, [r2, #0]
 8001da2:	0011      	movs	r1, r2
 8001da4:	2203      	movs	r2, #3
 8001da6:	400a      	ands	r2, r1
 8001da8:	00d2      	lsls	r2, r2, #3
 8001daa:	21ff      	movs	r1, #255	@ 0xff
 8001dac:	4091      	lsls	r1, r2
 8001dae:	000a      	movs	r2, r1
 8001db0:	43d2      	mvns	r2, r2
 8001db2:	401a      	ands	r2, r3
 8001db4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	019b      	lsls	r3, r3, #6
 8001dba:	22ff      	movs	r2, #255	@ 0xff
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	1dfb      	adds	r3, r7, #7
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	4003      	ands	r3, r0
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dcc:	4809      	ldr	r0, [pc, #36]	@ (8001df4 <__NVIC_SetPriority+0xd8>)
 8001dce:	1dfb      	adds	r3, r7, #7
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	001c      	movs	r4, r3
 8001dd4:	230f      	movs	r3, #15
 8001dd6:	4023      	ands	r3, r4
 8001dd8:	3b08      	subs	r3, #8
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	3306      	adds	r3, #6
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	18c3      	adds	r3, r0, r3
 8001de4:	3304      	adds	r3, #4
 8001de6:	601a      	str	r2, [r3, #0]
}
 8001de8:	46c0      	nop			@ (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b003      	add	sp, #12
 8001dee:	bd90      	pop	{r4, r7, pc}
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	1e5a      	subs	r2, r3, #1
 8001e04:	2380      	movs	r3, #128	@ 0x80
 8001e06:	045b      	lsls	r3, r3, #17
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d301      	bcc.n	8001e10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e010      	b.n	8001e32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e10:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <SysTick_Config+0x44>)
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	3a01      	subs	r2, #1
 8001e16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e18:	2301      	movs	r3, #1
 8001e1a:	425b      	negs	r3, r3
 8001e1c:	2103      	movs	r1, #3
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7ff ff7c 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e24:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <SysTick_Config+0x44>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2a:	4b04      	ldr	r3, [pc, #16]	@ (8001e3c <SysTick_Config+0x44>)
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	0018      	movs	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b002      	add	sp, #8
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	e000e010 	.word	0xe000e010

08001e40 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	1c02      	adds	r2, r0, #0
 8001e50:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	b25b      	sxtb	r3, r3
 8001e5a:	0011      	movs	r1, r2
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f7ff ff5d 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b004      	add	sp, #16
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	0002      	movs	r2, r0
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e76:	1dfb      	adds	r3, r7, #7
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b25b      	sxtb	r3, r3
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7ff ff33 	bl	8001ce8 <__NVIC_EnableIRQ>
}
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b002      	add	sp, #8
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7ff ffaf 	bl	8001df8 <SysTick_Config>
 8001e9a:	0003      	movs	r3, r0
}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb2:	e147      	b.n	8002144 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4091      	lsls	r1, r2
 8001ebe:	000a      	movs	r2, r1
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d100      	bne.n	8001ecc <HAL_GPIO_Init+0x28>
 8001eca:	e138      	b.n	800213e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d005      	beq.n	8001ee4 <HAL_GPIO_Init+0x40>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2203      	movs	r2, #3
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d130      	bne.n	8001f46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	2203      	movs	r2, #3
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	0013      	movs	r3, r2
 8001ef4:	43da      	mvns	r2, r3
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	409a      	lsls	r2, r3
 8001f06:	0013      	movs	r3, r2
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	0013      	movs	r3, r2
 8001f22:	43da      	mvns	r2, r3
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	2201      	movs	r2, #1
 8001f32:	401a      	ands	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	409a      	lsls	r2, r3
 8001f38:	0013      	movs	r3, r2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d017      	beq.n	8001f82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	0013      	movs	r3, r2
 8001f62:	43da      	mvns	r2, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	409a      	lsls	r2, r3
 8001f74:	0013      	movs	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2203      	movs	r2, #3
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d123      	bne.n	8001fd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	0092      	lsls	r2, r2, #2
 8001f98:	58d3      	ldr	r3, [r2, r3]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2207      	movs	r2, #7
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	43da      	mvns	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	691a      	ldr	r2, [r3, #16]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2107      	movs	r1, #7
 8001fba:	400b      	ands	r3, r1
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	0013      	movs	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	0092      	lsls	r2, r2, #2
 8001fd2:	6939      	ldr	r1, [r7, #16]
 8001fd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	0013      	movs	r3, r2
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	0013      	movs	r3, r2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	23c0      	movs	r3, #192	@ 0xc0
 8002010:	029b      	lsls	r3, r3, #10
 8002012:	4013      	ands	r3, r2
 8002014:	d100      	bne.n	8002018 <HAL_GPIO_Init+0x174>
 8002016:	e092      	b.n	800213e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002018:	4a50      	ldr	r2, [pc, #320]	@ (800215c <HAL_GPIO_Init+0x2b8>)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3318      	adds	r3, #24
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	589b      	ldr	r3, [r3, r2]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2203      	movs	r2, #3
 800202a:	4013      	ands	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	220f      	movs	r2, #15
 8002030:	409a      	lsls	r2, r3
 8002032:	0013      	movs	r3, r2
 8002034:	43da      	mvns	r2, r3
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	23a0      	movs	r3, #160	@ 0xa0
 8002040:	05db      	lsls	r3, r3, #23
 8002042:	429a      	cmp	r2, r3
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0x1ca>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a45      	ldr	r2, [pc, #276]	@ (8002160 <HAL_GPIO_Init+0x2bc>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00d      	beq.n	800206a <HAL_GPIO_Init+0x1c6>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a44      	ldr	r2, [pc, #272]	@ (8002164 <HAL_GPIO_Init+0x2c0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_Init+0x1c2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a43      	ldr	r2, [pc, #268]	@ (8002168 <HAL_GPIO_Init+0x2c4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_GPIO_Init+0x1be>
 800205e:	2303      	movs	r3, #3
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x1cc>
 8002062:	2305      	movs	r3, #5
 8002064:	e004      	b.n	8002070 <HAL_GPIO_Init+0x1cc>
 8002066:	2302      	movs	r3, #2
 8002068:	e002      	b.n	8002070 <HAL_GPIO_Init+0x1cc>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x1cc>
 800206e:	2300      	movs	r3, #0
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	2103      	movs	r1, #3
 8002074:	400a      	ands	r2, r1
 8002076:	00d2      	lsls	r2, r2, #3
 8002078:	4093      	lsls	r3, r2
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002080:	4936      	ldr	r1, [pc, #216]	@ (800215c <HAL_GPIO_Init+0x2b8>)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3318      	adds	r3, #24
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800208e:	4b33      	ldr	r3, [pc, #204]	@ (800215c <HAL_GPIO_Init+0x2b8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43da      	mvns	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	2380      	movs	r3, #128	@ 0x80
 80020a4:	035b      	lsls	r3, r3, #13
 80020a6:	4013      	ands	r3, r2
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020b2:	4b2a      	ldr	r3, [pc, #168]	@ (800215c <HAL_GPIO_Init+0x2b8>)
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80020b8:	4b28      	ldr	r3, [pc, #160]	@ (800215c <HAL_GPIO_Init+0x2b8>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43da      	mvns	r2, r3
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	2380      	movs	r3, #128	@ 0x80
 80020ce:	039b      	lsls	r3, r3, #14
 80020d0:	4013      	ands	r3, r2
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020dc:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <HAL_GPIO_Init+0x2b8>)
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020e2:	4a1e      	ldr	r2, [pc, #120]	@ (800215c <HAL_GPIO_Init+0x2b8>)
 80020e4:	2384      	movs	r3, #132	@ 0x84
 80020e6:	58d3      	ldr	r3, [r2, r3]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	43da      	mvns	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	2380      	movs	r3, #128	@ 0x80
 80020fa:	029b      	lsls	r3, r3, #10
 80020fc:	4013      	ands	r3, r2
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002108:	4914      	ldr	r1, [pc, #80]	@ (800215c <HAL_GPIO_Init+0x2b8>)
 800210a:	2284      	movs	r2, #132	@ 0x84
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002110:	4a12      	ldr	r2, [pc, #72]	@ (800215c <HAL_GPIO_Init+0x2b8>)
 8002112:	2380      	movs	r3, #128	@ 0x80
 8002114:	58d3      	ldr	r3, [r2, r3]
 8002116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	43da      	mvns	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	2380      	movs	r3, #128	@ 0x80
 8002128:	025b      	lsls	r3, r3, #9
 800212a:	4013      	ands	r3, r2
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002136:	4909      	ldr	r1, [pc, #36]	@ (800215c <HAL_GPIO_Init+0x2b8>)
 8002138:	2280      	movs	r2, #128	@ 0x80
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3301      	adds	r3, #1
 8002142:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	40da      	lsrs	r2, r3
 800214c:	1e13      	subs	r3, r2, #0
 800214e:	d000      	beq.n	8002152 <HAL_GPIO_Init+0x2ae>
 8002150:	e6b0      	b.n	8001eb4 <HAL_GPIO_Init+0x10>
  }
}
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	46c0      	nop			@ (mov r8, r8)
 8002156:	46bd      	mov	sp, r7
 8002158:	b006      	add	sp, #24
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021800 	.word	0x40021800
 8002160:	50000400 	.word	0x50000400
 8002164:	50000800 	.word	0x50000800
 8002168:	50000c00 	.word	0x50000c00

0800216c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	000a      	movs	r2, r1
 8002176:	1cbb      	adds	r3, r7, #2
 8002178:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	1cba      	adds	r2, r7, #2
 8002180:	8812      	ldrh	r2, [r2, #0]
 8002182:	4013      	ands	r3, r2
 8002184:	d004      	beq.n	8002190 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002186:	230f      	movs	r3, #15
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e003      	b.n	8002198 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002190:	230f      	movs	r3, #15
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002198:	230f      	movs	r3, #15
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	781b      	ldrb	r3, [r3, #0]
}
 800219e:	0018      	movs	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b004      	add	sp, #16
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	0008      	movs	r0, r1
 80021b0:	0011      	movs	r1, r2
 80021b2:	1cbb      	adds	r3, r7, #2
 80021b4:	1c02      	adds	r2, r0, #0
 80021b6:	801a      	strh	r2, [r3, #0]
 80021b8:	1c7b      	adds	r3, r7, #1
 80021ba:	1c0a      	adds	r2, r1, #0
 80021bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021be:	1c7b      	adds	r3, r7, #1
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021c6:	1cbb      	adds	r3, r7, #2
 80021c8:	881a      	ldrh	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021ce:	e003      	b.n	80021d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021d0:	1cbb      	adds	r3, r7, #2
 80021d2:	881a      	ldrh	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021d8:	46c0      	nop			@ (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	0002      	movs	r2, r0
 80021e8:	1dbb      	adds	r3, r7, #6
 80021ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80021ec:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	1dba      	adds	r2, r7, #6
 80021f2:	8812      	ldrh	r2, [r2, #0]
 80021f4:	4013      	ands	r3, r2
 80021f6:	d008      	beq.n	800220a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80021f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002230 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80021fa:	1dba      	adds	r2, r7, #6
 80021fc:	8812      	ldrh	r2, [r2, #0]
 80021fe:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002200:	1dbb      	adds	r3, r7, #6
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	0018      	movs	r0, r3
 8002206:	f000 f815 	bl	8002234 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800220a:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	1dba      	adds	r2, r7, #6
 8002210:	8812      	ldrh	r2, [r2, #0]
 8002212:	4013      	ands	r3, r2
 8002214:	d008      	beq.n	8002228 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002216:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002218:	1dba      	adds	r2, r7, #6
 800221a:	8812      	ldrh	r2, [r2, #0]
 800221c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800221e:	1dbb      	adds	r3, r7, #6
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	0018      	movs	r0, r3
 8002224:	f000 f810 	bl	8002248 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002228:	46c0      	nop			@ (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	b002      	add	sp, #8
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021800 	.word	0x40021800

08002234 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	0002      	movs	r2, r0
 800223c:	1dbb      	adds	r3, r7, #6
 800223e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002240:	46c0      	nop			@ (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b002      	add	sp, #8
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	0002      	movs	r2, r0
 8002250:	1dbb      	adds	r3, r7, #6
 8002252:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002254:	46c0      	nop			@ (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b002      	add	sp, #8
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	000a      	movs	r2, r1
 8002266:	1cfb      	adds	r3, r7, #3
 8002268:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d009      	beq.n	8002284 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8002270:	4b14      	ldr	r3, [pc, #80]	@ (80022c4 <HAL_PWR_EnterSTOPMode+0x68>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2207      	movs	r2, #7
 8002276:	4393      	bics	r3, r2
 8002278:	001a      	movs	r2, r3
 800227a:	4b12      	ldr	r3, [pc, #72]	@ (80022c4 <HAL_PWR_EnterSTOPMode+0x68>)
 800227c:	2101      	movs	r1, #1
 800227e:	430a      	orrs	r2, r1
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e005      	b.n	8002290 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8002284:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <HAL_PWR_EnterSTOPMode+0x68>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b0e      	ldr	r3, [pc, #56]	@ (80022c4 <HAL_PWR_EnterSTOPMode+0x68>)
 800228a:	2107      	movs	r1, #7
 800228c:	438a      	bics	r2, r1
 800228e:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002290:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <HAL_PWR_EnterSTOPMode+0x6c>)
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <HAL_PWR_EnterSTOPMode+0x6c>)
 8002296:	2104      	movs	r1, #4
 8002298:	430a      	orrs	r2, r1
 800229a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800229c:	1cfb      	adds	r3, r7, #3
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80022a4:	bf30      	wfi
 80022a6:	e002      	b.n	80022ae <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80022a8:	bf40      	sev
    __WFE();
 80022aa:	bf20      	wfe
    __WFE();
 80022ac:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_PWR_EnterSTOPMode+0x6c>)
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <HAL_PWR_EnterSTOPMode+0x6c>)
 80022b4:	2104      	movs	r1, #4
 80022b6:	438a      	bics	r2, r1
 80022b8:	611a      	str	r2, [r3, #16]
}
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	46bd      	mov	sp, r7
 80022be:	b002      	add	sp, #8
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	40007000 	.word	0x40007000
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80022d4:	4b19      	ldr	r3, [pc, #100]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a19      	ldr	r2, [pc, #100]	@ (8002340 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80022da:	4013      	ands	r3, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	4b17      	ldr	r3, [pc, #92]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	2380      	movs	r3, #128	@ 0x80
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d11f      	bne.n	8002330 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80022f0:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	0013      	movs	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	189b      	adds	r3, r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4912      	ldr	r1, [pc, #72]	@ (8002348 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80022fe:	0018      	movs	r0, r3
 8002300:	f7fd fefe 	bl	8000100 <__udivsi3>
 8002304:	0003      	movs	r3, r0
 8002306:	3301      	adds	r3, #1
 8002308:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800230a:	e008      	b.n	800231e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3b01      	subs	r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e001      	b.n	800231e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e009      	b.n	8002332 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800231e:	4b07      	ldr	r3, [pc, #28]	@ (800233c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	2380      	movs	r3, #128	@ 0x80
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	401a      	ands	r2, r3
 8002328:	2380      	movs	r3, #128	@ 0x80
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	429a      	cmp	r2, r3
 800232e:	d0ed      	beq.n	800230c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b004      	add	sp, #16
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			@ (mov r8, r8)
 800233c:	40007000 	.word	0x40007000
 8002340:	fffff9ff 	.word	0xfffff9ff
 8002344:	20000000 	.word	0x20000000
 8002348:	000f4240 	.word	0x000f4240

0800234c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e2f3      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2201      	movs	r2, #1
 8002364:	4013      	ands	r3, r2
 8002366:	d100      	bne.n	800236a <HAL_RCC_OscConfig+0x1e>
 8002368:	e07c      	b.n	8002464 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236a:	4bc3      	ldr	r3, [pc, #780]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2238      	movs	r2, #56	@ 0x38
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002374:	4bc0      	ldr	r3, [pc, #768]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2203      	movs	r2, #3
 800237a:	4013      	ands	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b10      	cmp	r3, #16
 8002382:	d102      	bne.n	800238a <HAL_RCC_OscConfig+0x3e>
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2b03      	cmp	r3, #3
 8002388:	d002      	beq.n	8002390 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d10b      	bne.n	80023a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	4bb9      	ldr	r3, [pc, #740]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	029b      	lsls	r3, r3, #10
 8002398:	4013      	ands	r3, r2
 800239a:	d062      	beq.n	8002462 <HAL_RCC_OscConfig+0x116>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d15e      	bne.n	8002462 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e2ce      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	2380      	movs	r3, #128	@ 0x80
 80023ae:	025b      	lsls	r3, r3, #9
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d107      	bne.n	80023c4 <HAL_RCC_OscConfig+0x78>
 80023b4:	4bb0      	ldr	r3, [pc, #704]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4baf      	ldr	r3, [pc, #700]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80023ba:	2180      	movs	r1, #128	@ 0x80
 80023bc:	0249      	lsls	r1, r1, #9
 80023be:	430a      	orrs	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e020      	b.n	8002406 <HAL_RCC_OscConfig+0xba>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	23a0      	movs	r3, #160	@ 0xa0
 80023ca:	02db      	lsls	r3, r3, #11
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d10e      	bne.n	80023ee <HAL_RCC_OscConfig+0xa2>
 80023d0:	4ba9      	ldr	r3, [pc, #676]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4ba8      	ldr	r3, [pc, #672]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80023d6:	2180      	movs	r1, #128	@ 0x80
 80023d8:	02c9      	lsls	r1, r1, #11
 80023da:	430a      	orrs	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	4ba6      	ldr	r3, [pc, #664]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4ba5      	ldr	r3, [pc, #660]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80023e4:	2180      	movs	r1, #128	@ 0x80
 80023e6:	0249      	lsls	r1, r1, #9
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e00b      	b.n	8002406 <HAL_RCC_OscConfig+0xba>
 80023ee:	4ba2      	ldr	r3, [pc, #648]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4ba1      	ldr	r3, [pc, #644]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80023f4:	49a1      	ldr	r1, [pc, #644]	@ (800267c <HAL_RCC_OscConfig+0x330>)
 80023f6:	400a      	ands	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	4b9f      	ldr	r3, [pc, #636]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	4b9e      	ldr	r3, [pc, #632]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002400:	499f      	ldr	r1, [pc, #636]	@ (8002680 <HAL_RCC_OscConfig+0x334>)
 8002402:	400a      	ands	r2, r1
 8002404:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d014      	beq.n	8002438 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7fe fce7 	bl	8000de0 <HAL_GetTick>
 8002412:	0003      	movs	r3, r0
 8002414:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002418:	f7fe fce2 	bl	8000de0 <HAL_GetTick>
 800241c:	0002      	movs	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	@ 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e28d      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800242a:	4b93      	ldr	r3, [pc, #588]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	029b      	lsls	r3, r3, #10
 8002432:	4013      	ands	r3, r2
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0xcc>
 8002436:	e015      	b.n	8002464 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe fcd2 	bl	8000de0 <HAL_GetTick>
 800243c:	0003      	movs	r3, r0
 800243e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002442:	f7fe fccd 	bl	8000de0 <HAL_GetTick>
 8002446:	0002      	movs	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b64      	cmp	r3, #100	@ 0x64
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e278      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002454:	4b88      	ldr	r3, [pc, #544]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	2380      	movs	r3, #128	@ 0x80
 800245a:	029b      	lsls	r3, r3, #10
 800245c:	4013      	ands	r3, r2
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0xf6>
 8002460:	e000      	b.n	8002464 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002462:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2202      	movs	r2, #2
 800246a:	4013      	ands	r3, r2
 800246c:	d100      	bne.n	8002470 <HAL_RCC_OscConfig+0x124>
 800246e:	e099      	b.n	80025a4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002470:	4b81      	ldr	r3, [pc, #516]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2238      	movs	r2, #56	@ 0x38
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800247a:	4b7f      	ldr	r3, [pc, #508]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2203      	movs	r2, #3
 8002480:	4013      	ands	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b10      	cmp	r3, #16
 8002488:	d102      	bne.n	8002490 <HAL_RCC_OscConfig+0x144>
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d002      	beq.n	8002496 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d135      	bne.n	8002502 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002496:	4b78      	ldr	r3, [pc, #480]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4013      	ands	r3, r2
 80024a0:	d005      	beq.n	80024ae <HAL_RCC_OscConfig+0x162>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e24b      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ae:	4b72      	ldr	r3, [pc, #456]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4a74      	ldr	r2, [pc, #464]	@ (8002684 <HAL_RCC_OscConfig+0x338>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	0019      	movs	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	021a      	lsls	r2, r3, #8
 80024be:	4b6e      	ldr	r3, [pc, #440]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d112      	bne.n	80024f0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024ca:	4b6b      	ldr	r3, [pc, #428]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6e      	ldr	r2, [pc, #440]	@ (8002688 <HAL_RCC_OscConfig+0x33c>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	0019      	movs	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	4b67      	ldr	r3, [pc, #412]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80024da:	430a      	orrs	r2, r1
 80024dc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80024de:	4b66      	ldr	r3, [pc, #408]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0adb      	lsrs	r3, r3, #11
 80024e4:	2207      	movs	r2, #7
 80024e6:	4013      	ands	r3, r2
 80024e8:	4a68      	ldr	r2, [pc, #416]	@ (800268c <HAL_RCC_OscConfig+0x340>)
 80024ea:	40da      	lsrs	r2, r3
 80024ec:	4b68      	ldr	r3, [pc, #416]	@ (8002690 <HAL_RCC_OscConfig+0x344>)
 80024ee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024f0:	4b68      	ldr	r3, [pc, #416]	@ (8002694 <HAL_RCC_OscConfig+0x348>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7fe fc17 	bl	8000d28 <HAL_InitTick>
 80024fa:	1e03      	subs	r3, r0, #0
 80024fc:	d051      	beq.n	80025a2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e221      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d030      	beq.n	800256c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800250a:	4b5b      	ldr	r3, [pc, #364]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a5e      	ldr	r2, [pc, #376]	@ (8002688 <HAL_RCC_OscConfig+0x33c>)
 8002510:	4013      	ands	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	4b57      	ldr	r3, [pc, #348]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 800251a:	430a      	orrs	r2, r1
 800251c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800251e:	4b56      	ldr	r3, [pc, #344]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4b55      	ldr	r3, [pc, #340]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002524:	2180      	movs	r1, #128	@ 0x80
 8002526:	0049      	lsls	r1, r1, #1
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe fc58 	bl	8000de0 <HAL_GetTick>
 8002530:	0003      	movs	r3, r0
 8002532:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002536:	f7fe fc53 	bl	8000de0 <HAL_GetTick>
 800253a:	0002      	movs	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e1fe      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002548:	4b4b      	ldr	r3, [pc, #300]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	2380      	movs	r3, #128	@ 0x80
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4013      	ands	r3, r2
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	4b48      	ldr	r3, [pc, #288]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4a4a      	ldr	r2, [pc, #296]	@ (8002684 <HAL_RCC_OscConfig+0x338>)
 800255a:	4013      	ands	r3, r2
 800255c:	0019      	movs	r1, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	021a      	lsls	r2, r3, #8
 8002564:	4b44      	ldr	r3, [pc, #272]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002566:	430a      	orrs	r2, r1
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	e01b      	b.n	80025a4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800256c:	4b42      	ldr	r3, [pc, #264]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b41      	ldr	r3, [pc, #260]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002572:	4949      	ldr	r1, [pc, #292]	@ (8002698 <HAL_RCC_OscConfig+0x34c>)
 8002574:	400a      	ands	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fc32 	bl	8000de0 <HAL_GetTick>
 800257c:	0003      	movs	r3, r0
 800257e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002582:	f7fe fc2d 	bl	8000de0 <HAL_GetTick>
 8002586:	0002      	movs	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e1d8      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002594:	4b38      	ldr	r3, [pc, #224]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2380      	movs	r3, #128	@ 0x80
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4013      	ands	r3, r2
 800259e:	d1f0      	bne.n	8002582 <HAL_RCC_OscConfig+0x236>
 80025a0:	e000      	b.n	80025a4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2208      	movs	r2, #8
 80025aa:	4013      	ands	r3, r2
 80025ac:	d047      	beq.n	800263e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025ae:	4b32      	ldr	r3, [pc, #200]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2238      	movs	r2, #56	@ 0x38
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b18      	cmp	r3, #24
 80025b8:	d10a      	bne.n	80025d0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80025ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80025bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025be:	2202      	movs	r2, #2
 80025c0:	4013      	ands	r3, r2
 80025c2:	d03c      	beq.n	800263e <HAL_RCC_OscConfig+0x2f2>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d138      	bne.n	800263e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e1ba      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d019      	beq.n	800260c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80025d8:	4b27      	ldr	r3, [pc, #156]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80025da:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025dc:	4b26      	ldr	r3, [pc, #152]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 80025de:	2101      	movs	r1, #1
 80025e0:	430a      	orrs	r2, r1
 80025e2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe fbfc 	bl	8000de0 <HAL_GetTick>
 80025e8:	0003      	movs	r3, r0
 80025ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ee:	f7fe fbf7 	bl	8000de0 <HAL_GetTick>
 80025f2:	0002      	movs	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e1a2      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002600:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002604:	2202      	movs	r2, #2
 8002606:	4013      	ands	r3, r2
 8002608:	d0f1      	beq.n	80025ee <HAL_RCC_OscConfig+0x2a2>
 800260a:	e018      	b.n	800263e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800260c:	4b1a      	ldr	r3, [pc, #104]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 800260e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002610:	4b19      	ldr	r3, [pc, #100]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002612:	2101      	movs	r1, #1
 8002614:	438a      	bics	r2, r1
 8002616:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe fbe2 	bl	8000de0 <HAL_GetTick>
 800261c:	0003      	movs	r3, r0
 800261e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002622:	f7fe fbdd 	bl	8000de0 <HAL_GetTick>
 8002626:	0002      	movs	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e188      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002634:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002638:	2202      	movs	r2, #2
 800263a:	4013      	ands	r3, r2
 800263c:	d1f1      	bne.n	8002622 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2204      	movs	r2, #4
 8002644:	4013      	ands	r3, r2
 8002646:	d100      	bne.n	800264a <HAL_RCC_OscConfig+0x2fe>
 8002648:	e0c6      	b.n	80027d8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264a:	231f      	movs	r3, #31
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002652:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2238      	movs	r2, #56	@ 0x38
 8002658:	4013      	ands	r3, r2
 800265a:	2b20      	cmp	r3, #32
 800265c:	d11e      	bne.n	800269c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800265e:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <HAL_RCC_OscConfig+0x32c>)
 8002660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002662:	2202      	movs	r2, #2
 8002664:	4013      	ands	r3, r2
 8002666:	d100      	bne.n	800266a <HAL_RCC_OscConfig+0x31e>
 8002668:	e0b6      	b.n	80027d8 <HAL_RCC_OscConfig+0x48c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d000      	beq.n	8002674 <HAL_RCC_OscConfig+0x328>
 8002672:	e0b1      	b.n	80027d8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e166      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
 8002678:	40021000 	.word	0x40021000
 800267c:	fffeffff 	.word	0xfffeffff
 8002680:	fffbffff 	.word	0xfffbffff
 8002684:	ffff80ff 	.word	0xffff80ff
 8002688:	ffffc7ff 	.word	0xffffc7ff
 800268c:	00f42400 	.word	0x00f42400
 8002690:	20000000 	.word	0x20000000
 8002694:	20000004 	.word	0x20000004
 8002698:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800269c:	4bac      	ldr	r3, [pc, #688]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 800269e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026a0:	2380      	movs	r3, #128	@ 0x80
 80026a2:	055b      	lsls	r3, r3, #21
 80026a4:	4013      	ands	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_OscConfig+0x360>
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x362>
 80026ac:	2300      	movs	r3, #0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d011      	beq.n	80026d6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4ba7      	ldr	r3, [pc, #668]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 80026b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026b6:	4ba6      	ldr	r3, [pc, #664]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 80026b8:	2180      	movs	r1, #128	@ 0x80
 80026ba:	0549      	lsls	r1, r1, #21
 80026bc:	430a      	orrs	r2, r1
 80026be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026c0:	4ba3      	ldr	r3, [pc, #652]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 80026c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	055b      	lsls	r3, r3, #21
 80026c8:	4013      	ands	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80026ce:	231f      	movs	r3, #31
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d6:	4b9f      	ldr	r3, [pc, #636]	@ (8002954 <HAL_RCC_OscConfig+0x608>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	2380      	movs	r3, #128	@ 0x80
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4013      	ands	r3, r2
 80026e0:	d11a      	bne.n	8002718 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026e2:	4b9c      	ldr	r3, [pc, #624]	@ (8002954 <HAL_RCC_OscConfig+0x608>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4b9b      	ldr	r3, [pc, #620]	@ (8002954 <HAL_RCC_OscConfig+0x608>)
 80026e8:	2180      	movs	r1, #128	@ 0x80
 80026ea:	0049      	lsls	r1, r1, #1
 80026ec:	430a      	orrs	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80026f0:	f7fe fb76 	bl	8000de0 <HAL_GetTick>
 80026f4:	0003      	movs	r3, r0
 80026f6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fa:	f7fe fb71 	bl	8000de0 <HAL_GetTick>
 80026fe:	0002      	movs	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e11c      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800270c:	4b91      	ldr	r3, [pc, #580]	@ (8002954 <HAL_RCC_OscConfig+0x608>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2380      	movs	r3, #128	@ 0x80
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4013      	ands	r3, r2
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x3e2>
 8002720:	4b8b      	ldr	r3, [pc, #556]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 8002722:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002724:	4b8a      	ldr	r3, [pc, #552]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 8002726:	2101      	movs	r1, #1
 8002728:	430a      	orrs	r2, r1
 800272a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800272c:	e01c      	b.n	8002768 <HAL_RCC_OscConfig+0x41c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b05      	cmp	r3, #5
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x404>
 8002736:	4b86      	ldr	r3, [pc, #536]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 8002738:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800273a:	4b85      	ldr	r3, [pc, #532]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 800273c:	2104      	movs	r1, #4
 800273e:	430a      	orrs	r2, r1
 8002740:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002742:	4b83      	ldr	r3, [pc, #524]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 8002744:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002746:	4b82      	ldr	r3, [pc, #520]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 8002748:	2101      	movs	r1, #1
 800274a:	430a      	orrs	r2, r1
 800274c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800274e:	e00b      	b.n	8002768 <HAL_RCC_OscConfig+0x41c>
 8002750:	4b7f      	ldr	r3, [pc, #508]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 8002752:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002754:	4b7e      	ldr	r3, [pc, #504]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 8002756:	2101      	movs	r1, #1
 8002758:	438a      	bics	r2, r1
 800275a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800275c:	4b7c      	ldr	r3, [pc, #496]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 800275e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002760:	4b7b      	ldr	r3, [pc, #492]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 8002762:	2104      	movs	r1, #4
 8002764:	438a      	bics	r2, r1
 8002766:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d014      	beq.n	800279a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe fb36 	bl	8000de0 <HAL_GetTick>
 8002774:	0003      	movs	r3, r0
 8002776:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002778:	e009      	b.n	800278e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7fe fb31 	bl	8000de0 <HAL_GetTick>
 800277e:	0002      	movs	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	4a74      	ldr	r2, [pc, #464]	@ (8002958 <HAL_RCC_OscConfig+0x60c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e0db      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800278e:	4b70      	ldr	r3, [pc, #448]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 8002790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002792:	2202      	movs	r2, #2
 8002794:	4013      	ands	r3, r2
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x42e>
 8002798:	e013      	b.n	80027c2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe fb21 	bl	8000de0 <HAL_GetTick>
 800279e:	0003      	movs	r3, r0
 80027a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027a2:	e009      	b.n	80027b8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a4:	f7fe fb1c 	bl	8000de0 <HAL_GetTick>
 80027a8:	0002      	movs	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	4a6a      	ldr	r2, [pc, #424]	@ (8002958 <HAL_RCC_OscConfig+0x60c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e0c6      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027b8:	4b65      	ldr	r3, [pc, #404]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 80027ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027bc:	2202      	movs	r2, #2
 80027be:	4013      	ands	r3, r2
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027c2:	231f      	movs	r3, #31
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d105      	bne.n	80027d8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80027cc:	4b60      	ldr	r3, [pc, #384]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 80027ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027d0:	4b5f      	ldr	r3, [pc, #380]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 80027d2:	4962      	ldr	r1, [pc, #392]	@ (800295c <HAL_RCC_OscConfig+0x610>)
 80027d4:	400a      	ands	r2, r1
 80027d6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d100      	bne.n	80027e2 <HAL_RCC_OscConfig+0x496>
 80027e0:	e0b0      	b.n	8002944 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2238      	movs	r2, #56	@ 0x38
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b10      	cmp	r3, #16
 80027ec:	d100      	bne.n	80027f0 <HAL_RCC_OscConfig+0x4a4>
 80027ee:	e078      	b.n	80028e2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d153      	bne.n	80028a0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f8:	4b55      	ldr	r3, [pc, #340]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b54      	ldr	r3, [pc, #336]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 80027fe:	4958      	ldr	r1, [pc, #352]	@ (8002960 <HAL_RCC_OscConfig+0x614>)
 8002800:	400a      	ands	r2, r1
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe faec 	bl	8000de0 <HAL_GetTick>
 8002808:	0003      	movs	r3, r0
 800280a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280e:	f7fe fae7 	bl	8000de0 <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e092      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002820:	4b4b      	ldr	r3, [pc, #300]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	@ 0x80
 8002826:	049b      	lsls	r3, r3, #18
 8002828:	4013      	ands	r3, r2
 800282a:	d1f0      	bne.n	800280e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800282c:	4b48      	ldr	r3, [pc, #288]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4a4c      	ldr	r2, [pc, #304]	@ (8002964 <HAL_RCC_OscConfig+0x618>)
 8002832:	4013      	ands	r3, r2
 8002834:	0019      	movs	r1, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1a      	ldr	r2, [r3, #32]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	431a      	orrs	r2, r3
 8002854:	4b3e      	ldr	r3, [pc, #248]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 8002856:	430a      	orrs	r2, r1
 8002858:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285a:	4b3d      	ldr	r3, [pc, #244]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b3c      	ldr	r3, [pc, #240]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 8002860:	2180      	movs	r1, #128	@ 0x80
 8002862:	0449      	lsls	r1, r1, #17
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002868:	4b39      	ldr	r3, [pc, #228]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	4b38      	ldr	r3, [pc, #224]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 800286e:	2180      	movs	r1, #128	@ 0x80
 8002870:	0549      	lsls	r1, r1, #21
 8002872:	430a      	orrs	r2, r1
 8002874:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fab3 	bl	8000de0 <HAL_GetTick>
 800287a:	0003      	movs	r3, r0
 800287c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe faae 	bl	8000de0 <HAL_GetTick>
 8002884:	0002      	movs	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e059      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002892:	4b2f      	ldr	r3, [pc, #188]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	2380      	movs	r3, #128	@ 0x80
 8002898:	049b      	lsls	r3, r3, #18
 800289a:	4013      	ands	r3, r2
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x534>
 800289e:	e051      	b.n	8002944 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 80028a6:	492e      	ldr	r1, [pc, #184]	@ (8002960 <HAL_RCC_OscConfig+0x614>)
 80028a8:	400a      	ands	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fa98 	bl	8000de0 <HAL_GetTick>
 80028b0:	0003      	movs	r3, r0
 80028b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b6:	f7fe fa93 	bl	8000de0 <HAL_GetTick>
 80028ba:	0002      	movs	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e03e      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c8:	4b21      	ldr	r3, [pc, #132]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	2380      	movs	r3, #128	@ 0x80
 80028ce:	049b      	lsls	r3, r3, #18
 80028d0:	4013      	ands	r3, r2
 80028d2:	d1f0      	bne.n	80028b6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80028d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 80028da:	4923      	ldr	r1, [pc, #140]	@ (8002968 <HAL_RCC_OscConfig+0x61c>)
 80028dc:	400a      	ands	r2, r1
 80028de:	60da      	str	r2, [r3, #12]
 80028e0:	e030      	b.n	8002944 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e02b      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80028ee:	4b18      	ldr	r3, [pc, #96]	@ (8002950 <HAL_RCC_OscConfig+0x604>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2203      	movs	r2, #3
 80028f8:	401a      	ands	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d11e      	bne.n	8002940 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2270      	movs	r2, #112	@ 0x70
 8002906:	401a      	ands	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d117      	bne.n	8002940 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	23fe      	movs	r3, #254	@ 0xfe
 8002914:	01db      	lsls	r3, r3, #7
 8002916:	401a      	ands	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d10e      	bne.n	8002940 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	23f8      	movs	r3, #248	@ 0xf8
 8002926:	039b      	lsls	r3, r3, #14
 8002928:	401a      	ands	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d106      	bne.n	8002940 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	0f5b      	lsrs	r3, r3, #29
 8002936:	075a      	lsls	r2, r3, #29
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	0018      	movs	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	b008      	add	sp, #32
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	40021000 	.word	0x40021000
 8002954:	40007000 	.word	0x40007000
 8002958:	00001388 	.word	0x00001388
 800295c:	efffffff 	.word	0xefffffff
 8002960:	feffffff 	.word	0xfeffffff
 8002964:	1fc1808c 	.word	0x1fc1808c
 8002968:	effefffc 	.word	0xeffefffc

0800296c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0e9      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002980:	4b76      	ldr	r3, [pc, #472]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2207      	movs	r2, #7
 8002986:	4013      	ands	r3, r2
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d91e      	bls.n	80029cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b73      	ldr	r3, [pc, #460]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2207      	movs	r2, #7
 8002994:	4393      	bics	r3, r2
 8002996:	0019      	movs	r1, r3
 8002998:	4b70      	ldr	r3, [pc, #448]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029a0:	f7fe fa1e 	bl	8000de0 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029a8:	e009      	b.n	80029be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029aa:	f7fe fa19 	bl	8000de0 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0ca      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029be:	4b67      	ldr	r3, [pc, #412]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2207      	movs	r2, #7
 80029c4:	4013      	ands	r3, r2
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d1ee      	bne.n	80029aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2202      	movs	r2, #2
 80029d2:	4013      	ands	r3, r2
 80029d4:	d015      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2204      	movs	r2, #4
 80029dc:	4013      	ands	r3, r2
 80029de:	d006      	beq.n	80029ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80029e0:	4b60      	ldr	r3, [pc, #384]	@ (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	4b5f      	ldr	r3, [pc, #380]	@ (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 80029e6:	21e0      	movs	r1, #224	@ 0xe0
 80029e8:	01c9      	lsls	r1, r1, #7
 80029ea:	430a      	orrs	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	4a5d      	ldr	r2, [pc, #372]	@ (8002b68 <HAL_RCC_ClockConfig+0x1fc>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	0019      	movs	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	4b59      	ldr	r3, [pc, #356]	@ (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2201      	movs	r2, #1
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d057      	beq.n	8002abc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d107      	bne.n	8002a24 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a14:	4b53      	ldr	r3, [pc, #332]	@ (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	2380      	movs	r3, #128	@ 0x80
 8002a1a:	029b      	lsls	r3, r3, #10
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d12b      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e097      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d107      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2c:	4b4d      	ldr	r3, [pc, #308]	@ (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2380      	movs	r3, #128	@ 0x80
 8002a32:	049b      	lsls	r3, r3, #18
 8002a34:	4013      	ands	r3, r2
 8002a36:	d11f      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e08b      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a44:	4b47      	ldr	r3, [pc, #284]	@ (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	2380      	movs	r3, #128	@ 0x80
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d113      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e07f      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d106      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a5c:	4b41      	ldr	r3, [pc, #260]	@ (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a60:	2202      	movs	r2, #2
 8002a62:	4013      	ands	r3, r2
 8002a64:	d108      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e074      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6e:	2202      	movs	r2, #2
 8002a70:	4013      	ands	r3, r2
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e06d      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a78:	4b3a      	ldr	r3, [pc, #232]	@ (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	4393      	bics	r3, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	4b37      	ldr	r3, [pc, #220]	@ (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a8c:	f7fe f9a8 	bl	8000de0 <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a94:	e009      	b.n	8002aaa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a96:	f7fe f9a3 	bl	8000de0 <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	4a2f      	ldr	r2, [pc, #188]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e054      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2238      	movs	r2, #56	@ 0x38
 8002ab0:	401a      	ands	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d1ec      	bne.n	8002a96 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002abc:	4b27      	ldr	r3, [pc, #156]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d21e      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b24      	ldr	r3, [pc, #144]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2207      	movs	r2, #7
 8002ad0:	4393      	bics	r3, r2
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	4b21      	ldr	r3, [pc, #132]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002adc:	f7fe f980 	bl	8000de0 <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ae4:	e009      	b.n	8002afa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae6:	f7fe f97b 	bl	8000de0 <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b60 <HAL_RCC_ClockConfig+0x1f4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e02c      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002afa:	4b18      	ldr	r3, [pc, #96]	@ (8002b5c <HAL_RCC_ClockConfig+0x1f0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2207      	movs	r2, #7
 8002b00:	4013      	ands	r3, r2
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d009      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b12:	4b14      	ldr	r3, [pc, #80]	@ (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	4a15      	ldr	r2, [pc, #84]	@ (8002b6c <HAL_RCC_ClockConfig+0x200>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	0019      	movs	r1, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	4b10      	ldr	r3, [pc, #64]	@ (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002b22:	430a      	orrs	r2, r1
 8002b24:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002b26:	f000 f87d 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 8002b2a:	0001      	movs	r1, r0
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b64 <HAL_RCC_ClockConfig+0x1f8>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	0a1b      	lsrs	r3, r3, #8
 8002b32:	220f      	movs	r2, #15
 8002b34:	401a      	ands	r2, r3
 8002b36:	4b0e      	ldr	r3, [pc, #56]	@ (8002b70 <HAL_RCC_ClockConfig+0x204>)
 8002b38:	0092      	lsls	r2, r2, #2
 8002b3a:	58d3      	ldr	r3, [r2, r3]
 8002b3c:	221f      	movs	r2, #31
 8002b3e:	4013      	ands	r3, r2
 8002b40:	000a      	movs	r2, r1
 8002b42:	40da      	lsrs	r2, r3
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_RCC_ClockConfig+0x208>)
 8002b46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b48:	4b0b      	ldr	r3, [pc, #44]	@ (8002b78 <HAL_RCC_ClockConfig+0x20c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7fe f8eb 	bl	8000d28 <HAL_InitTick>
 8002b52:	0003      	movs	r3, r0
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b004      	add	sp, #16
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40022000 	.word	0x40022000
 8002b60:	00001388 	.word	0x00001388
 8002b64:	40021000 	.word	0x40021000
 8002b68:	fffff0ff 	.word	0xfffff0ff
 8002b6c:	ffff8fff 	.word	0xffff8fff
 8002b70:	080046d8 	.word	0x080046d8
 8002b74:	20000000 	.word	0x20000000
 8002b78:	20000004 	.word	0x20000004

08002b7c <HAL_RCC_MCOConfig>:
  *
  * (*) Feature not available on all devices of the family
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08c      	sub	sp, #48	@ 0x30
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8002b88:	2010      	movs	r0, #16
 8002b8a:	183b      	adds	r3, r7, r0
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	605a      	str	r2, [r3, #4]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b90:	183b      	adds	r3, r7, r0
 8002b92:	2203      	movs	r2, #3
 8002b94:	60da      	str	r2, [r3, #12]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8002b96:	183b      	adds	r3, r7, r0
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	055b      	lsls	r3, r3, #21
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	0c1b      	lsrs	r3, r3, #16
 8002baa:	220f      	movs	r2, #15
 8002bac:	4013      	ands	r3, r2
 8002bae:	22a0      	movs	r2, #160	@ 0xa0
 8002bb0:	0352      	lsls	r2, r2, #13
 8002bb2:	4694      	mov	ip, r2
 8002bb4:	4463      	add	r3, ip
 8002bb6:	029b      	lsls	r3, r3, #10
 8002bb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	220f      	movs	r2, #15
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->IOPENR, (1UL << mco_gpio_index ));
 8002bc4:	4b15      	ldr	r3, [pc, #84]	@ (8002c1c <HAL_RCC_MCOConfig+0xa0>)
 8002bc6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bc8:	2201      	movs	r2, #1
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <HAL_RCC_MCOConfig+0xa0>)
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	041b      	lsls	r3, r3, #16
 8002bd8:	0c1a      	lsrs	r2, r3, #16
 8002bda:	183b      	adds	r3, r7, r0
 8002bdc:	601a      	str	r2, [r3, #0]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	0d1b      	lsrs	r3, r3, #20
 8002be2:	22ff      	movs	r2, #255	@ 0xff
 8002be4:	401a      	ands	r2, r3
 8002be6:	183b      	adds	r3, r7, r0
 8002be8:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8002bea:	183a      	adds	r2, r7, r0
 8002bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bee:	0011      	movs	r1, r2
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7ff f957 	bl	8001ea4 <HAL_GPIO_Init>

  if (mcoindex == RCC_MCO1_INDEX)
 8002bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <HAL_RCC_MCOConfig+0x96>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8002bfc:	4b07      	ldr	r3, [pc, #28]	@ (8002c1c <HAL_RCC_MCOConfig+0xa0>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4a07      	ldr	r2, [pc, #28]	@ (8002c20 <HAL_RCC_MCOConfig+0xa4>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	4b03      	ldr	r3, [pc, #12]	@ (8002c1c <HAL_RCC_MCOConfig+0xa0>)
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	609a      	str	r2, [r3, #8]
#endif /* RCC_MCO2_SUPPORT */
  else
  {
    /* Nothing to do */
  }
}
 8002c12:	46c0      	nop			@ (mov r8, r8)
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b00c      	add	sp, #48	@ 0x30
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			@ (mov r8, r8)
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	88ffffff 	.word	0x88ffffff

08002c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2238      	movs	r2, #56	@ 0x38
 8002c30:	4013      	ands	r3, r2
 8002c32:	d10f      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c34:	4b39      	ldr	r3, [pc, #228]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0adb      	lsrs	r3, r3, #11
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2201      	movs	r2, #1
 8002c40:	409a      	lsls	r2, r3
 8002c42:	0013      	movs	r3, r2
 8002c44:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c46:	6839      	ldr	r1, [r7, #0]
 8002c48:	4835      	ldr	r0, [pc, #212]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c4a:	f7fd fa59 	bl	8000100 <__udivsi3>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	e05d      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c54:	4b31      	ldr	r3, [pc, #196]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2238      	movs	r2, #56	@ 0x38
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d102      	bne.n	8002c66 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c60:	4b30      	ldr	r3, [pc, #192]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x100>)
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	e054      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c66:	4b2d      	ldr	r3, [pc, #180]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2238      	movs	r2, #56	@ 0x38
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b10      	cmp	r3, #16
 8002c70:	d138      	bne.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c72:	4b2a      	ldr	r3, [pc, #168]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2203      	movs	r2, #3
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c7c:	4b27      	ldr	r3, [pc, #156]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	2207      	movs	r2, #7
 8002c84:	4013      	ands	r3, r2
 8002c86:	3301      	adds	r3, #1
 8002c88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d10d      	bne.n	8002cac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	4824      	ldr	r0, [pc, #144]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x100>)
 8002c94:	f7fd fa34 	bl	8000100 <__udivsi3>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	227f      	movs	r2, #127	@ 0x7f
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	434b      	muls	r3, r1
 8002ca8:	617b      	str	r3, [r7, #20]
        break;
 8002caa:	e00d      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	481c      	ldr	r0, [pc, #112]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cb0:	f7fd fa26 	bl	8000100 <__udivsi3>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	4b18      	ldr	r3, [pc, #96]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	227f      	movs	r2, #127	@ 0x7f
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	434b      	muls	r3, r1
 8002cc4:	617b      	str	r3, [r7, #20]
        break;
 8002cc6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002cc8:	4b14      	ldr	r3, [pc, #80]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	0f5b      	lsrs	r3, r3, #29
 8002cce:	2207      	movs	r2, #7
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	6978      	ldr	r0, [r7, #20]
 8002cda:	f7fd fa11 	bl	8000100 <__udivsi3>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	e015      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2238      	movs	r2, #56	@ 0x38
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d103      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002cf0:	2380      	movs	r3, #128	@ 0x80
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	e00b      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002cf8:	4b08      	ldr	r3, [pc, #32]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2238      	movs	r2, #56	@ 0x38
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b18      	cmp	r3, #24
 8002d02:	d103      	bne.n	8002d0c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d04:	23fa      	movs	r3, #250	@ 0xfa
 8002d06:	01db      	lsls	r3, r3, #7
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	e001      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d10:	693b      	ldr	r3, [r7, #16]
}
 8002d12:	0018      	movs	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b006      	add	sp, #24
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	00f42400 	.word	0x00f42400
 8002d24:	007a1200 	.word	0x007a1200

08002d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002d30:	2313      	movs	r3, #19
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d38:	2312      	movs	r3, #18
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	2380      	movs	r3, #128	@ 0x80
 8002d46:	029b      	lsls	r3, r3, #10
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d100      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002d4c:	e0a3      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4e:	2011      	movs	r0, #17
 8002d50:	183b      	adds	r3, r7, r0
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d56:	4b7f      	ldr	r3, [pc, #508]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d5a:	2380      	movs	r3, #128	@ 0x80
 8002d5c:	055b      	lsls	r3, r3, #21
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d110      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	4b7c      	ldr	r3, [pc, #496]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d66:	4b7b      	ldr	r3, [pc, #492]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d68:	2180      	movs	r1, #128	@ 0x80
 8002d6a:	0549      	lsls	r1, r1, #21
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d70:	4b78      	ldr	r3, [pc, #480]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d74:	2380      	movs	r3, #128	@ 0x80
 8002d76:	055b      	lsls	r3, r3, #21
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7e:	183b      	adds	r3, r7, r0
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d84:	4b74      	ldr	r3, [pc, #464]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b73      	ldr	r3, [pc, #460]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d8a:	2180      	movs	r1, #128	@ 0x80
 8002d8c:	0049      	lsls	r1, r1, #1
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d92:	f7fe f825 	bl	8000de0 <HAL_GetTick>
 8002d96:	0003      	movs	r3, r0
 8002d98:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9c:	f7fe f820 	bl	8000de0 <HAL_GetTick>
 8002da0:	0002      	movs	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d904      	bls.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002daa:	2313      	movs	r3, #19
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	2203      	movs	r2, #3
 8002db0:	701a      	strb	r2, [r3, #0]
        break;
 8002db2:	e005      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002db4:	4b68      	ldr	r3, [pc, #416]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	2380      	movs	r3, #128	@ 0x80
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d0ed      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002dc0:	2313      	movs	r3, #19
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d154      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dca:	4b62      	ldr	r3, [pc, #392]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dcc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002dce:	23c0      	movs	r3, #192	@ 0xc0
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d019      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d014      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002de6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dea:	4a5c      	ldr	r2, [pc, #368]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002df0:	4b58      	ldr	r3, [pc, #352]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002df2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002df4:	4b57      	ldr	r3, [pc, #348]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002df6:	2180      	movs	r1, #128	@ 0x80
 8002df8:	0249      	lsls	r1, r1, #9
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dfe:	4b55      	ldr	r3, [pc, #340]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e02:	4b54      	ldr	r3, [pc, #336]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e04:	4956      	ldr	r1, [pc, #344]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002e06:	400a      	ands	r2, r1
 8002e08:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e0a:	4b52      	ldr	r3, [pc, #328]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2201      	movs	r2, #1
 8002e14:	4013      	ands	r3, r2
 8002e16:	d016      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fd ffe2 	bl	8000de0 <HAL_GetTick>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e20:	e00c      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fd ffdd 	bl	8000de0 <HAL_GetTick>
 8002e26:	0002      	movs	r2, r0
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	4a4d      	ldr	r2, [pc, #308]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d904      	bls.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002e32:	2313      	movs	r3, #19
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	2203      	movs	r2, #3
 8002e38:	701a      	strb	r2, [r3, #0]
            break;
 8002e3a:	e004      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3c:	4b45      	ldr	r3, [pc, #276]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e40:	2202      	movs	r2, #2
 8002e42:	4013      	ands	r3, r2
 8002e44:	d0ed      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002e46:	2313      	movs	r3, #19
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e50:	4b40      	ldr	r3, [pc, #256]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e54:	4a41      	ldr	r2, [pc, #260]	@ (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e60:	430a      	orrs	r2, r1
 8002e62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e64:	e00c      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e66:	2312      	movs	r3, #18
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	2213      	movs	r2, #19
 8002e6c:	18ba      	adds	r2, r7, r2
 8002e6e:	7812      	ldrb	r2, [r2, #0]
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	e005      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e74:	2312      	movs	r3, #18
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	2213      	movs	r2, #19
 8002e7a:	18ba      	adds	r2, r7, r2
 8002e7c:	7812      	ldrb	r2, [r2, #0]
 8002e7e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e80:	2311      	movs	r3, #17
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d105      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8a:	4b32      	ldr	r3, [pc, #200]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e8e:	4b31      	ldr	r3, [pc, #196]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002e90:	4935      	ldr	r1, [pc, #212]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e92:	400a      	ands	r2, r1
 8002e94:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d009      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	4393      	bics	r3, r2
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	4b29      	ldr	r3, [pc, #164]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ebe:	4b25      	ldr	r3, [pc, #148]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	4b21      	ldr	r3, [pc, #132]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	2380      	movs	r3, #128	@ 0x80
 8002ed8:	01db      	lsls	r3, r3, #7
 8002eda:	4013      	ands	r3, r2
 8002edc:	d015      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ede:	4b1d      	ldr	r3, [pc, #116]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	0899      	lsrs	r1, r3, #2
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	4b1a      	ldr	r3, [pc, #104]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002eec:	430a      	orrs	r2, r1
 8002eee:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	2380      	movs	r3, #128	@ 0x80
 8002ef6:	05db      	lsls	r3, r3, #23
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d106      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002efc:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	4b14      	ldr	r3, [pc, #80]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f02:	2180      	movs	r1, #128	@ 0x80
 8002f04:	0249      	lsls	r1, r1, #9
 8002f06:	430a      	orrs	r2, r1
 8002f08:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	2380      	movs	r3, #128	@ 0x80
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	4013      	ands	r3, r2
 8002f14:	d016      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f16:	4b0f      	ldr	r3, [pc, #60]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1a:	4a15      	ldr	r2, [pc, #84]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	0019      	movs	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	4b0b      	ldr	r3, [pc, #44]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f26:	430a      	orrs	r2, r1
 8002f28:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	2380      	movs	r3, #128	@ 0x80
 8002f30:	01db      	lsls	r3, r3, #7
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d106      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f36:	4b07      	ldr	r3, [pc, #28]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f3c:	2180      	movs	r1, #128	@ 0x80
 8002f3e:	0249      	lsls	r1, r1, #9
 8002f40:	430a      	orrs	r2, r1
 8002f42:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002f44:	2312      	movs	r3, #18
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	781b      	ldrb	r3, [r3, #0]
}
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b006      	add	sp, #24
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			@ (mov r8, r8)
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40007000 	.word	0x40007000
 8002f5c:	fffffcff 	.word	0xfffffcff
 8002f60:	fffeffff 	.word	0xfffeffff
 8002f64:	00001388 	.word	0x00001388
 8002f68:	efffffff 	.word	0xefffffff
 8002f6c:	ffffcfff 	.word	0xffffcfff
 8002f70:	ffff3fff 	.word	0xffff3fff

08002f74 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f74:	b5b0      	push	{r4, r5, r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f7c:	230f      	movs	r3, #15
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d100      	bne.n	8002f8c <HAL_RTC_Init+0x18>
 8002f8a:	e08c      	b.n	80030a6 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2229      	movs	r2, #41	@ 0x29
 8002f90:	5c9b      	ldrb	r3, [r3, r2]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2228      	movs	r2, #40	@ 0x28
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2288      	movs	r2, #136	@ 0x88
 8002fa4:	0212      	lsls	r2, r2, #8
 8002fa6:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f7fd fd98 	bl	8000ae0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2229      	movs	r2, #41	@ 0x29
 8002fb4:	2102      	movs	r1, #2
 8002fb6:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	2210      	movs	r2, #16
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b10      	cmp	r3, #16
 8002fc4:	d062      	beq.n	800308c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	22ca      	movs	r2, #202	@ 0xca
 8002fcc:	625a      	str	r2, [r3, #36]	@ 0x24
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2253      	movs	r2, #83	@ 0x53
 8002fd4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002fd6:	250f      	movs	r5, #15
 8002fd8:	197c      	adds	r4, r7, r5
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 f891 	bl	8003104 <RTC_EnterInitMode>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002fe6:	0028      	movs	r0, r5
 8002fe8:	183b      	adds	r3, r7, r0
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d12c      	bne.n	800304a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	492e      	ldr	r1, [pc, #184]	@ (80030b4 <HAL_RTC_Init+0x140>)
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6999      	ldr	r1, [r3, #24]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6912      	ldr	r2, [r2, #16]
 8003026:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6919      	ldr	r1, [r3, #16]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	041a      	lsls	r2, r3, #16
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800303c:	183c      	adds	r4, r7, r0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	0018      	movs	r0, r3
 8003042:	f000 f8a1 	bl	8003188 <RTC_ExitInitMode>
 8003046:	0003      	movs	r3, r0
 8003048:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800304a:	230f      	movs	r3, #15
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d116      	bne.n	8003082 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	00d2      	lsls	r2, r2, #3
 8003060:	08d2      	lsrs	r2, r2, #3
 8003062:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6999      	ldr	r1, [r3, #24]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	22ff      	movs	r2, #255	@ 0xff
 8003088:	625a      	str	r2, [r3, #36]	@ 0x24
 800308a:	e003      	b.n	8003094 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800308c:	230f      	movs	r3, #15
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8003094:	230f      	movs	r3, #15
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2229      	movs	r2, #41	@ 0x29
 80030a2:	2101      	movs	r1, #1
 80030a4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80030a6:	230f      	movs	r3, #15
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	781b      	ldrb	r3, [r3, #0]
}
 80030ac:	0018      	movs	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b004      	add	sp, #16
 80030b2:	bdb0      	pop	{r4, r5, r7, pc}
 80030b4:	fb8fffbf 	.word	0xfb8fffbf

080030b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003100 <HAL_RTC_WaitForSynchro+0x48>)
 80030c6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80030c8:	f7fd fe8a 	bl	8000de0 <HAL_GetTick>
 80030cc:	0003      	movs	r3, r0
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80030d0:	e00a      	b.n	80030e8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80030d2:	f7fd fe85 	bl	8000de0 <HAL_GetTick>
 80030d6:	0002      	movs	r2, r0
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1ad2      	subs	r2, r2, r3
 80030dc:	23fa      	movs	r3, #250	@ 0xfa
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d901      	bls.n	80030e8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e006      	b.n	80030f6 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	4013      	ands	r3, r2
 80030f2:	d0ee      	beq.n	80030d2 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	0018      	movs	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b004      	add	sp, #16
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			@ (mov r8, r8)
 8003100:	0001005f 	.word	0x0001005f

08003104 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800310c:	230f      	movs	r3, #15
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2240      	movs	r2, #64	@ 0x40
 800311c:	4013      	ands	r3, r2
 800311e:	d12c      	bne.n	800317a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2180      	movs	r1, #128	@ 0x80
 800312c:	430a      	orrs	r2, r1
 800312e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003130:	f7fd fe56 	bl	8000de0 <HAL_GetTick>
 8003134:	0003      	movs	r3, r0
 8003136:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003138:	e014      	b.n	8003164 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800313a:	f7fd fe51 	bl	8000de0 <HAL_GetTick>
 800313e:	0002      	movs	r2, r0
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	1ad2      	subs	r2, r2, r3
 8003144:	200f      	movs	r0, #15
 8003146:	183b      	adds	r3, r7, r0
 8003148:	1839      	adds	r1, r7, r0
 800314a:	7809      	ldrb	r1, [r1, #0]
 800314c:	7019      	strb	r1, [r3, #0]
 800314e:	23fa      	movs	r3, #250	@ 0xfa
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	429a      	cmp	r2, r3
 8003154:	d906      	bls.n	8003164 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8003156:	183b      	adds	r3, r7, r0
 8003158:	2203      	movs	r2, #3
 800315a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2229      	movs	r2, #41	@ 0x29
 8003160:	2103      	movs	r1, #3
 8003162:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2240      	movs	r2, #64	@ 0x40
 800316c:	4013      	ands	r3, r2
 800316e:	d104      	bne.n	800317a <RTC_EnterInitMode+0x76>
 8003170:	230f      	movs	r3, #15
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b03      	cmp	r3, #3
 8003178:	d1df      	bne.n	800313a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800317a:	230f      	movs	r3, #15
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	781b      	ldrb	r3, [r3, #0]
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b004      	add	sp, #16
 8003186:	bd80      	pop	{r7, pc}

08003188 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003190:	240f      	movs	r4, #15
 8003192:	193b      	adds	r3, r7, r4
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003198:	4b1c      	ldr	r3, [pc, #112]	@ (800320c <RTC_ExitInitMode+0x84>)
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	4b1b      	ldr	r3, [pc, #108]	@ (800320c <RTC_ExitInitMode+0x84>)
 800319e:	2180      	movs	r1, #128	@ 0x80
 80031a0:	438a      	bics	r2, r1
 80031a2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80031a4:	4b19      	ldr	r3, [pc, #100]	@ (800320c <RTC_ExitInitMode+0x84>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	2220      	movs	r2, #32
 80031aa:	4013      	ands	r3, r2
 80031ac:	d10d      	bne.n	80031ca <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7ff ff81 	bl	80030b8 <HAL_RTC_WaitForSynchro>
 80031b6:	1e03      	subs	r3, r0, #0
 80031b8:	d021      	beq.n	80031fe <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2229      	movs	r2, #41	@ 0x29
 80031be:	2103      	movs	r1, #3
 80031c0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80031c2:	193b      	adds	r3, r7, r4
 80031c4:	2203      	movs	r2, #3
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e019      	b.n	80031fe <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80031ca:	4b10      	ldr	r3, [pc, #64]	@ (800320c <RTC_ExitInitMode+0x84>)
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	4b0f      	ldr	r3, [pc, #60]	@ (800320c <RTC_ExitInitMode+0x84>)
 80031d0:	2120      	movs	r1, #32
 80031d2:	438a      	bics	r2, r1
 80031d4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	0018      	movs	r0, r3
 80031da:	f7ff ff6d 	bl	80030b8 <HAL_RTC_WaitForSynchro>
 80031de:	1e03      	subs	r3, r0, #0
 80031e0:	d007      	beq.n	80031f2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2229      	movs	r2, #41	@ 0x29
 80031e6:	2103      	movs	r1, #3
 80031e8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80031ea:	230f      	movs	r3, #15
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	2203      	movs	r2, #3
 80031f0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80031f2:	4b06      	ldr	r3, [pc, #24]	@ (800320c <RTC_ExitInitMode+0x84>)
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	4b05      	ldr	r3, [pc, #20]	@ (800320c <RTC_ExitInitMode+0x84>)
 80031f8:	2120      	movs	r1, #32
 80031fa:	430a      	orrs	r2, r1
 80031fc:	619a      	str	r2, [r3, #24]
  }

  return status;
 80031fe:	230f      	movs	r3, #15
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	781b      	ldrb	r3, [r3, #0]
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	b005      	add	sp, #20
 800320a:	bd90      	pop	{r4, r7, pc}
 800320c:	40002800 	.word	0x40002800

08003210 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2228      	movs	r2, #40	@ 0x28
 8003220:	5c9b      	ldrb	r3, [r3, r2]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003226:	2302      	movs	r3, #2
 8003228:	e082      	b.n	8003330 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2228      	movs	r2, #40	@ 0x28
 800322e:	2101      	movs	r1, #1
 8003230:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2229      	movs	r2, #41	@ 0x29
 8003236:	2102      	movs	r1, #2
 8003238:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	22ca      	movs	r2, #202	@ 0xca
 8003240:	625a      	str	r2, [r3, #36]	@ 0x24
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2253      	movs	r2, #83	@ 0x53
 8003248:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699a      	ldr	r2, [r3, #24]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4938      	ldr	r1, [pc, #224]	@ (8003338 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8003256:	400a      	ands	r2, r1
 8003258:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2104      	movs	r1, #4
 8003266:	430a      	orrs	r2, r1
 8003268:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800326a:	4b34      	ldr	r3, [pc, #208]	@ (800333c <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2240      	movs	r2, #64	@ 0x40
 8003270:	4013      	ands	r3, r2
 8003272:	d121      	bne.n	80032b8 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8003274:	f7fd fdb4 	bl	8000de0 <HAL_GetTick>
 8003278:	0003      	movs	r3, r0
 800327a:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800327c:	e016      	b.n	80032ac <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800327e:	f7fd fdaf 	bl	8000de0 <HAL_GetTick>
 8003282:	0002      	movs	r2, r0
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	1ad2      	subs	r2, r2, r3
 8003288:	23fa      	movs	r3, #250	@ 0xfa
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	429a      	cmp	r2, r3
 800328e:	d90d      	bls.n	80032ac <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	22ff      	movs	r2, #255	@ 0xff
 8003296:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2229      	movs	r2, #41	@ 0x29
 800329c:	2103      	movs	r1, #3
 800329e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2228      	movs	r2, #40	@ 0x28
 80032a4:	2100      	movs	r1, #0
 80032a6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e041      	b.n	8003330 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2204      	movs	r2, #4
 80032b4:	4013      	ands	r3, r2
 80032b6:	d0e2      	beq.n	800327e <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2107      	movs	r1, #7
 80032cc:	438a      	bics	r2, r1
 80032ce:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6999      	ldr	r1, [r3, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	430a      	orrs	r2, r1
 80032de:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80032e0:	4a17      	ldr	r2, [pc, #92]	@ (8003340 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80032e2:	2380      	movs	r3, #128	@ 0x80
 80032e4:	58d3      	ldr	r3, [r2, r3]
 80032e6:	4916      	ldr	r1, [pc, #88]	@ (8003340 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80032e8:	2280      	movs	r2, #128	@ 0x80
 80032ea:	0312      	lsls	r2, r2, #12
 80032ec:	4313      	orrs	r3, r2
 80032ee:	2280      	movs	r2, #128	@ 0x80
 80032f0:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2180      	movs	r1, #128	@ 0x80
 80032fe:	01c9      	lsls	r1, r1, #7
 8003300:	430a      	orrs	r2, r1
 8003302:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2180      	movs	r1, #128	@ 0x80
 8003310:	00c9      	lsls	r1, r1, #3
 8003312:	430a      	orrs	r2, r1
 8003314:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	22ff      	movs	r2, #255	@ 0xff
 800331c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2229      	movs	r2, #41	@ 0x29
 8003322:	2101      	movs	r1, #1
 8003324:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2228      	movs	r2, #40	@ 0x28
 800332a:	2100      	movs	r1, #0
 800332c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	b006      	add	sp, #24
 8003336:	bd80      	pop	{r7, pc}
 8003338:	fffffbff 	.word	0xfffffbff
 800333c:	40002800 	.word	0x40002800
 8003340:	40021800 	.word	0x40021800

08003344 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003352:	2204      	movs	r2, #4
 8003354:	4013      	ands	r3, r2
 8003356:	d00b      	beq.n	8003370 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2104      	movs	r1, #4
 8003364:	430a      	orrs	r2, r1
 8003366:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	0018      	movs	r0, r3
 800336c:	f000 f808 	bl	8003380 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2229      	movs	r2, #41	@ 0x29
 8003374:	2101      	movs	r1, #1
 8003376:	5499      	strb	r1, [r3, r2]
}
 8003378:	46c0      	nop			@ (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b002      	add	sp, #8
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003388:	46c0      	nop			@ (mov r8, r8)
 800338a:	46bd      	mov	sp, r7
 800338c:	b002      	add	sp, #8
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e04a      	b.n	8003438 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	223d      	movs	r2, #61	@ 0x3d
 80033a6:	5c9b      	ldrb	r3, [r3, r2]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d107      	bne.n	80033be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	223c      	movs	r2, #60	@ 0x3c
 80033b2:	2100      	movs	r1, #0
 80033b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7fd fbcf 	bl	8000b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	223d      	movs	r2, #61	@ 0x3d
 80033c2:	2102      	movs	r1, #2
 80033c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3304      	adds	r3, #4
 80033ce:	0019      	movs	r1, r3
 80033d0:	0010      	movs	r0, r2
 80033d2:	f000 fcf9 	bl	8003dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2248      	movs	r2, #72	@ 0x48
 80033da:	2101      	movs	r1, #1
 80033dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	223e      	movs	r2, #62	@ 0x3e
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	223f      	movs	r2, #63	@ 0x3f
 80033ea:	2101      	movs	r1, #1
 80033ec:	5499      	strb	r1, [r3, r2]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2240      	movs	r2, #64	@ 0x40
 80033f2:	2101      	movs	r1, #1
 80033f4:	5499      	strb	r1, [r3, r2]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2241      	movs	r2, #65	@ 0x41
 80033fa:	2101      	movs	r1, #1
 80033fc:	5499      	strb	r1, [r3, r2]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2242      	movs	r2, #66	@ 0x42
 8003402:	2101      	movs	r1, #1
 8003404:	5499      	strb	r1, [r3, r2]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2243      	movs	r2, #67	@ 0x43
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2244      	movs	r2, #68	@ 0x44
 8003412:	2101      	movs	r1, #1
 8003414:	5499      	strb	r1, [r3, r2]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2245      	movs	r2, #69	@ 0x45
 800341a:	2101      	movs	r1, #1
 800341c:	5499      	strb	r1, [r3, r2]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2246      	movs	r2, #70	@ 0x46
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2247      	movs	r2, #71	@ 0x47
 800342a:	2101      	movs	r1, #1
 800342c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	223d      	movs	r2, #61	@ 0x3d
 8003432:	2101      	movs	r1, #1
 8003434:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	0018      	movs	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	b002      	add	sp, #8
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e04a      	b.n	80034e8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	223d      	movs	r2, #61	@ 0x3d
 8003456:	5c9b      	ldrb	r3, [r3, r2]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d107      	bne.n	800346e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	223c      	movs	r2, #60	@ 0x3c
 8003462:	2100      	movs	r1, #0
 8003464:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	0018      	movs	r0, r3
 800346a:	f000 f841 	bl	80034f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	223d      	movs	r2, #61	@ 0x3d
 8003472:	2102      	movs	r1, #2
 8003474:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	0019      	movs	r1, r3
 8003480:	0010      	movs	r0, r2
 8003482:	f000 fca1 	bl	8003dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2248      	movs	r2, #72	@ 0x48
 800348a:	2101      	movs	r1, #1
 800348c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	223e      	movs	r2, #62	@ 0x3e
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	223f      	movs	r2, #63	@ 0x3f
 800349a:	2101      	movs	r1, #1
 800349c:	5499      	strb	r1, [r3, r2]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2240      	movs	r2, #64	@ 0x40
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2241      	movs	r2, #65	@ 0x41
 80034aa:	2101      	movs	r1, #1
 80034ac:	5499      	strb	r1, [r3, r2]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2242      	movs	r2, #66	@ 0x42
 80034b2:	2101      	movs	r1, #1
 80034b4:	5499      	strb	r1, [r3, r2]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2243      	movs	r2, #67	@ 0x43
 80034ba:	2101      	movs	r1, #1
 80034bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2244      	movs	r2, #68	@ 0x44
 80034c2:	2101      	movs	r1, #1
 80034c4:	5499      	strb	r1, [r3, r2]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2245      	movs	r2, #69	@ 0x45
 80034ca:	2101      	movs	r1, #1
 80034cc:	5499      	strb	r1, [r3, r2]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2246      	movs	r2, #70	@ 0x46
 80034d2:	2101      	movs	r1, #1
 80034d4:	5499      	strb	r1, [r3, r2]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2247      	movs	r2, #71	@ 0x47
 80034da:	2101      	movs	r1, #1
 80034dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	223d      	movs	r2, #61	@ 0x3d
 80034e2:	2101      	movs	r1, #1
 80034e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	0018      	movs	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b002      	add	sp, #8
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034f8:	46c0      	nop			@ (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b002      	add	sp, #8
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d108      	bne.n	8003522 <HAL_TIM_PWM_Start+0x22>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	223e      	movs	r2, #62	@ 0x3e
 8003514:	5c9b      	ldrb	r3, [r3, r2]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	1e5a      	subs	r2, r3, #1
 800351c:	4193      	sbcs	r3, r2
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e037      	b.n	8003592 <HAL_TIM_PWM_Start+0x92>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d108      	bne.n	800353a <HAL_TIM_PWM_Start+0x3a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	223f      	movs	r2, #63	@ 0x3f
 800352c:	5c9b      	ldrb	r3, [r3, r2]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	1e5a      	subs	r2, r3, #1
 8003534:	4193      	sbcs	r3, r2
 8003536:	b2db      	uxtb	r3, r3
 8003538:	e02b      	b.n	8003592 <HAL_TIM_PWM_Start+0x92>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b08      	cmp	r3, #8
 800353e:	d108      	bne.n	8003552 <HAL_TIM_PWM_Start+0x52>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2240      	movs	r2, #64	@ 0x40
 8003544:	5c9b      	ldrb	r3, [r3, r2]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	1e5a      	subs	r2, r3, #1
 800354c:	4193      	sbcs	r3, r2
 800354e:	b2db      	uxtb	r3, r3
 8003550:	e01f      	b.n	8003592 <HAL_TIM_PWM_Start+0x92>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b0c      	cmp	r3, #12
 8003556:	d108      	bne.n	800356a <HAL_TIM_PWM_Start+0x6a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2241      	movs	r2, #65	@ 0x41
 800355c:	5c9b      	ldrb	r3, [r3, r2]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	1e5a      	subs	r2, r3, #1
 8003564:	4193      	sbcs	r3, r2
 8003566:	b2db      	uxtb	r3, r3
 8003568:	e013      	b.n	8003592 <HAL_TIM_PWM_Start+0x92>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b10      	cmp	r3, #16
 800356e:	d108      	bne.n	8003582 <HAL_TIM_PWM_Start+0x82>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2242      	movs	r2, #66	@ 0x42
 8003574:	5c9b      	ldrb	r3, [r3, r2]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	1e5a      	subs	r2, r3, #1
 800357c:	4193      	sbcs	r3, r2
 800357e:	b2db      	uxtb	r3, r3
 8003580:	e007      	b.n	8003592 <HAL_TIM_PWM_Start+0x92>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2243      	movs	r2, #67	@ 0x43
 8003586:	5c9b      	ldrb	r3, [r3, r2]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	1e5a      	subs	r2, r3, #1
 800358e:	4193      	sbcs	r3, r2
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e07b      	b.n	8003692 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d104      	bne.n	80035aa <HAL_TIM_PWM_Start+0xaa>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	223e      	movs	r2, #62	@ 0x3e
 80035a4:	2102      	movs	r1, #2
 80035a6:	5499      	strb	r1, [r3, r2]
 80035a8:	e023      	b.n	80035f2 <HAL_TIM_PWM_Start+0xf2>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d104      	bne.n	80035ba <HAL_TIM_PWM_Start+0xba>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	223f      	movs	r2, #63	@ 0x3f
 80035b4:	2102      	movs	r1, #2
 80035b6:	5499      	strb	r1, [r3, r2]
 80035b8:	e01b      	b.n	80035f2 <HAL_TIM_PWM_Start+0xf2>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d104      	bne.n	80035ca <HAL_TIM_PWM_Start+0xca>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2240      	movs	r2, #64	@ 0x40
 80035c4:	2102      	movs	r1, #2
 80035c6:	5499      	strb	r1, [r3, r2]
 80035c8:	e013      	b.n	80035f2 <HAL_TIM_PWM_Start+0xf2>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b0c      	cmp	r3, #12
 80035ce:	d104      	bne.n	80035da <HAL_TIM_PWM_Start+0xda>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2241      	movs	r2, #65	@ 0x41
 80035d4:	2102      	movs	r1, #2
 80035d6:	5499      	strb	r1, [r3, r2]
 80035d8:	e00b      	b.n	80035f2 <HAL_TIM_PWM_Start+0xf2>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b10      	cmp	r3, #16
 80035de:	d104      	bne.n	80035ea <HAL_TIM_PWM_Start+0xea>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2242      	movs	r2, #66	@ 0x42
 80035e4:	2102      	movs	r1, #2
 80035e6:	5499      	strb	r1, [r3, r2]
 80035e8:	e003      	b.n	80035f2 <HAL_TIM_PWM_Start+0xf2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2243      	movs	r2, #67	@ 0x43
 80035ee:	2102      	movs	r1, #2
 80035f0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6839      	ldr	r1, [r7, #0]
 80035f8:	2201      	movs	r2, #1
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 ff96 	bl	800452c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a25      	ldr	r2, [pc, #148]	@ (800369c <HAL_TIM_PWM_Start+0x19c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d009      	beq.n	800361e <HAL_TIM_PWM_Start+0x11e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a24      	ldr	r2, [pc, #144]	@ (80036a0 <HAL_TIM_PWM_Start+0x1a0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d004      	beq.n	800361e <HAL_TIM_PWM_Start+0x11e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a22      	ldr	r2, [pc, #136]	@ (80036a4 <HAL_TIM_PWM_Start+0x1a4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_TIM_PWM_Start+0x122>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_TIM_PWM_Start+0x124>
 8003622:	2300      	movs	r3, #0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2180      	movs	r1, #128	@ 0x80
 8003634:	0209      	lsls	r1, r1, #8
 8003636:	430a      	orrs	r2, r1
 8003638:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a17      	ldr	r2, [pc, #92]	@ (800369c <HAL_TIM_PWM_Start+0x19c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_TIM_PWM_Start+0x14e>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a17      	ldr	r2, [pc, #92]	@ (80036a8 <HAL_TIM_PWM_Start+0x1a8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d116      	bne.n	800367c <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4a15      	ldr	r2, [pc, #84]	@ (80036ac <HAL_TIM_PWM_Start+0x1ac>)
 8003656:	4013      	ands	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b06      	cmp	r3, #6
 800365e:	d016      	beq.n	800368e <HAL_TIM_PWM_Start+0x18e>
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	2380      	movs	r3, #128	@ 0x80
 8003664:	025b      	lsls	r3, r3, #9
 8003666:	429a      	cmp	r2, r3
 8003668:	d011      	beq.n	800368e <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2101      	movs	r1, #1
 8003676:	430a      	orrs	r2, r1
 8003678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367a:	e008      	b.n	800368e <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2101      	movs	r1, #1
 8003688:	430a      	orrs	r2, r1
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e000      	b.n	8003690 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b004      	add	sp, #16
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	40012c00 	.word	0x40012c00
 80036a0:	40014400 	.word	0x40014400
 80036a4:	40014800 	.word	0x40014800
 80036a8:	40000400 	.word	0x40000400
 80036ac:	00010007 	.word	0x00010007

080036b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6839      	ldr	r1, [r7, #0]
 80036c0:	2200      	movs	r2, #0
 80036c2:	0018      	movs	r0, r3
 80036c4:	f000 ff32 	bl	800452c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a35      	ldr	r2, [pc, #212]	@ (80037a4 <HAL_TIM_PWM_Stop+0xf4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d009      	beq.n	80036e6 <HAL_TIM_PWM_Stop+0x36>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a34      	ldr	r2, [pc, #208]	@ (80037a8 <HAL_TIM_PWM_Stop+0xf8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_TIM_PWM_Stop+0x36>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a32      	ldr	r2, [pc, #200]	@ (80037ac <HAL_TIM_PWM_Stop+0xfc>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <HAL_TIM_PWM_Stop+0x3a>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_TIM_PWM_Stop+0x3c>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d013      	beq.n	8003718 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	4a2e      	ldr	r2, [pc, #184]	@ (80037b0 <HAL_TIM_PWM_Stop+0x100>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	d10d      	bne.n	8003718 <HAL_TIM_PWM_Stop+0x68>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	4a2c      	ldr	r2, [pc, #176]	@ (80037b4 <HAL_TIM_PWM_Stop+0x104>)
 8003704:	4013      	ands	r3, r2
 8003706:	d107      	bne.n	8003718 <HAL_TIM_PWM_Stop+0x68>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4929      	ldr	r1, [pc, #164]	@ (80037b8 <HAL_TIM_PWM_Stop+0x108>)
 8003714:	400a      	ands	r2, r1
 8003716:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	4a24      	ldr	r2, [pc, #144]	@ (80037b0 <HAL_TIM_PWM_Stop+0x100>)
 8003720:	4013      	ands	r3, r2
 8003722:	d10d      	bne.n	8003740 <HAL_TIM_PWM_Stop+0x90>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4a22      	ldr	r2, [pc, #136]	@ (80037b4 <HAL_TIM_PWM_Stop+0x104>)
 800372c:	4013      	ands	r3, r2
 800372e:	d107      	bne.n	8003740 <HAL_TIM_PWM_Stop+0x90>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2101      	movs	r1, #1
 800373c:	438a      	bics	r2, r1
 800373e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d104      	bne.n	8003750 <HAL_TIM_PWM_Stop+0xa0>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	223e      	movs	r2, #62	@ 0x3e
 800374a:	2101      	movs	r1, #1
 800374c:	5499      	strb	r1, [r3, r2]
 800374e:	e023      	b.n	8003798 <HAL_TIM_PWM_Stop+0xe8>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2b04      	cmp	r3, #4
 8003754:	d104      	bne.n	8003760 <HAL_TIM_PWM_Stop+0xb0>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	223f      	movs	r2, #63	@ 0x3f
 800375a:	2101      	movs	r1, #1
 800375c:	5499      	strb	r1, [r3, r2]
 800375e:	e01b      	b.n	8003798 <HAL_TIM_PWM_Stop+0xe8>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	2b08      	cmp	r3, #8
 8003764:	d104      	bne.n	8003770 <HAL_TIM_PWM_Stop+0xc0>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2240      	movs	r2, #64	@ 0x40
 800376a:	2101      	movs	r1, #1
 800376c:	5499      	strb	r1, [r3, r2]
 800376e:	e013      	b.n	8003798 <HAL_TIM_PWM_Stop+0xe8>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d104      	bne.n	8003780 <HAL_TIM_PWM_Stop+0xd0>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2241      	movs	r2, #65	@ 0x41
 800377a:	2101      	movs	r1, #1
 800377c:	5499      	strb	r1, [r3, r2]
 800377e:	e00b      	b.n	8003798 <HAL_TIM_PWM_Stop+0xe8>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b10      	cmp	r3, #16
 8003784:	d104      	bne.n	8003790 <HAL_TIM_PWM_Stop+0xe0>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2242      	movs	r2, #66	@ 0x42
 800378a:	2101      	movs	r1, #1
 800378c:	5499      	strb	r1, [r3, r2]
 800378e:	e003      	b.n	8003798 <HAL_TIM_PWM_Stop+0xe8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2243      	movs	r2, #67	@ 0x43
 8003794:	2101      	movs	r1, #1
 8003796:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	0018      	movs	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	b002      	add	sp, #8
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			@ (mov r8, r8)
 80037a4:	40012c00 	.word	0x40012c00
 80037a8:	40014400 	.word	0x40014400
 80037ac:	40014800 	.word	0x40014800
 80037b0:	00001111 	.word	0x00001111
 80037b4:	00000444 	.word	0x00000444
 80037b8:	ffff7fff 	.word	0xffff7fff

080037bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2202      	movs	r2, #2
 80037d8:	4013      	ands	r3, r2
 80037da:	d021      	beq.n	8003820 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2202      	movs	r2, #2
 80037e0:	4013      	ands	r3, r2
 80037e2:	d01d      	beq.n	8003820 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2203      	movs	r2, #3
 80037ea:	4252      	negs	r2, r2
 80037ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2203      	movs	r2, #3
 80037fc:	4013      	ands	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	0018      	movs	r0, r3
 8003804:	f000 fac8 	bl	8003d98 <HAL_TIM_IC_CaptureCallback>
 8003808:	e007      	b.n	800381a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	0018      	movs	r0, r3
 800380e:	f000 fabb 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	0018      	movs	r0, r3
 8003816:	f000 fac7 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2204      	movs	r2, #4
 8003824:	4013      	ands	r3, r2
 8003826:	d022      	beq.n	800386e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2204      	movs	r2, #4
 800382c:	4013      	ands	r3, r2
 800382e:	d01e      	beq.n	800386e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2205      	movs	r2, #5
 8003836:	4252      	negs	r2, r2
 8003838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2202      	movs	r2, #2
 800383e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	23c0      	movs	r3, #192	@ 0xc0
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4013      	ands	r3, r2
 800384c:	d004      	beq.n	8003858 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	0018      	movs	r0, r3
 8003852:	f000 faa1 	bl	8003d98 <HAL_TIM_IC_CaptureCallback>
 8003856:	e007      	b.n	8003868 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	0018      	movs	r0, r3
 800385c:	f000 fa94 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	0018      	movs	r0, r3
 8003864:	f000 faa0 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2208      	movs	r2, #8
 8003872:	4013      	ands	r3, r2
 8003874:	d021      	beq.n	80038ba <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2208      	movs	r2, #8
 800387a:	4013      	ands	r3, r2
 800387c:	d01d      	beq.n	80038ba <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2209      	movs	r2, #9
 8003884:	4252      	negs	r2, r2
 8003886:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2204      	movs	r2, #4
 800388c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	2203      	movs	r2, #3
 8003896:	4013      	ands	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	0018      	movs	r0, r3
 800389e:	f000 fa7b 	bl	8003d98 <HAL_TIM_IC_CaptureCallback>
 80038a2:	e007      	b.n	80038b4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	0018      	movs	r0, r3
 80038a8:	f000 fa6e 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	0018      	movs	r0, r3
 80038b0:	f000 fa7a 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2210      	movs	r2, #16
 80038be:	4013      	ands	r3, r2
 80038c0:	d022      	beq.n	8003908 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2210      	movs	r2, #16
 80038c6:	4013      	ands	r3, r2
 80038c8:	d01e      	beq.n	8003908 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2211      	movs	r2, #17
 80038d0:	4252      	negs	r2, r2
 80038d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2208      	movs	r2, #8
 80038d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	23c0      	movs	r3, #192	@ 0xc0
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4013      	ands	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	0018      	movs	r0, r3
 80038ec:	f000 fa54 	bl	8003d98 <HAL_TIM_IC_CaptureCallback>
 80038f0:	e007      	b.n	8003902 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 fa47 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	0018      	movs	r0, r3
 80038fe:	f000 fa53 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2201      	movs	r2, #1
 800390c:	4013      	ands	r3, r2
 800390e:	d00c      	beq.n	800392a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	4013      	ands	r3, r2
 8003916:	d008      	beq.n	800392a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2202      	movs	r2, #2
 800391e:	4252      	negs	r2, r2
 8003920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	0018      	movs	r0, r3
 8003926:	f000 fa27 	bl	8003d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2280      	movs	r2, #128	@ 0x80
 800392e:	4013      	ands	r3, r2
 8003930:	d104      	bne.n	800393c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	2380      	movs	r3, #128	@ 0x80
 8003936:	019b      	lsls	r3, r3, #6
 8003938:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800393a:	d00b      	beq.n	8003954 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2280      	movs	r2, #128	@ 0x80
 8003940:	4013      	ands	r3, r2
 8003942:	d007      	beq.n	8003954 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1e      	ldr	r2, [pc, #120]	@ (80039c4 <HAL_TIM_IRQHandler+0x208>)
 800394a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	0018      	movs	r0, r3
 8003950:	f000 fe7a 	bl	8004648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	2380      	movs	r3, #128	@ 0x80
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4013      	ands	r3, r2
 800395c:	d00b      	beq.n	8003976 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2280      	movs	r2, #128	@ 0x80
 8003962:	4013      	ands	r3, r2
 8003964:	d007      	beq.n	8003976 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a17      	ldr	r2, [pc, #92]	@ (80039c8 <HAL_TIM_IRQHandler+0x20c>)
 800396c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	0018      	movs	r0, r3
 8003972:	f000 fe71 	bl	8004658 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2240      	movs	r2, #64	@ 0x40
 800397a:	4013      	ands	r3, r2
 800397c:	d00c      	beq.n	8003998 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2240      	movs	r2, #64	@ 0x40
 8003982:	4013      	ands	r3, r2
 8003984:	d008      	beq.n	8003998 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2241      	movs	r2, #65	@ 0x41
 800398c:	4252      	negs	r2, r2
 800398e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	0018      	movs	r0, r3
 8003994:	f000 fa10 	bl	8003db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2220      	movs	r2, #32
 800399c:	4013      	ands	r3, r2
 800399e:	d00c      	beq.n	80039ba <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	4013      	ands	r3, r2
 80039a6:	d008      	beq.n	80039ba <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2221      	movs	r2, #33	@ 0x21
 80039ae:	4252      	negs	r2, r2
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f000 fe3f 	bl	8004638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b004      	add	sp, #16
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	ffffdf7f 	.word	0xffffdf7f
 80039c8:	fffffeff 	.word	0xfffffeff

080039cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d8:	2317      	movs	r3, #23
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	223c      	movs	r2, #60	@ 0x3c
 80039e4:	5c9b      	ldrb	r3, [r3, r2]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_TIM_PWM_ConfigChannel+0x22>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e0e5      	b.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	223c      	movs	r2, #60	@ 0x3c
 80039f2:	2101      	movs	r1, #1
 80039f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b14      	cmp	r3, #20
 80039fa:	d900      	bls.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x32>
 80039fc:	e0d1      	b.n	8003ba2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	009a      	lsls	r2, r3, #2
 8003a02:	4b70      	ldr	r3, [pc, #448]	@ (8003bc4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003a04:	18d3      	adds	r3, r2, r3
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	0011      	movs	r1, r2
 8003a12:	0018      	movs	r0, r3
 8003a14:	f000 fa52 	bl	8003ebc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2108      	movs	r1, #8
 8003a24:	430a      	orrs	r2, r1
 8003a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2104      	movs	r1, #4
 8003a34:	438a      	bics	r2, r1
 8003a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6999      	ldr	r1, [r3, #24]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	619a      	str	r2, [r3, #24]
      break;
 8003a4a:	e0af      	b.n	8003bac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	0011      	movs	r1, r2
 8003a54:	0018      	movs	r0, r3
 8003a56:	f000 fab1 	bl	8003fbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2180      	movs	r1, #128	@ 0x80
 8003a66:	0109      	lsls	r1, r1, #4
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699a      	ldr	r2, [r3, #24]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4954      	ldr	r1, [pc, #336]	@ (8003bc8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003a78:	400a      	ands	r2, r1
 8003a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6999      	ldr	r1, [r3, #24]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	021a      	lsls	r2, r3, #8
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	619a      	str	r2, [r3, #24]
      break;
 8003a90:	e08c      	b.n	8003bac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	0011      	movs	r1, r2
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f000 fb0c 	bl	80040b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2108      	movs	r1, #8
 8003aac:	430a      	orrs	r2, r1
 8003aae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69da      	ldr	r2, [r3, #28]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2104      	movs	r1, #4
 8003abc:	438a      	bics	r2, r1
 8003abe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69d9      	ldr	r1, [r3, #28]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	61da      	str	r2, [r3, #28]
      break;
 8003ad2:	e06b      	b.n	8003bac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	0011      	movs	r1, r2
 8003adc:	0018      	movs	r0, r3
 8003ade:	f000 fb6d 	bl	80041bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2180      	movs	r1, #128	@ 0x80
 8003aee:	0109      	lsls	r1, r1, #4
 8003af0:	430a      	orrs	r2, r1
 8003af2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69da      	ldr	r2, [r3, #28]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4932      	ldr	r1, [pc, #200]	@ (8003bc8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	69d9      	ldr	r1, [r3, #28]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	021a      	lsls	r2, r3, #8
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	61da      	str	r2, [r3, #28]
      break;
 8003b18:	e048      	b.n	8003bac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	0011      	movs	r1, r2
 8003b22:	0018      	movs	r0, r3
 8003b24:	f000 fbae 	bl	8004284 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2108      	movs	r1, #8
 8003b34:	430a      	orrs	r2, r1
 8003b36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2104      	movs	r1, #4
 8003b44:	438a      	bics	r2, r1
 8003b46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b5a:	e027      	b.n	8003bac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	0011      	movs	r1, r2
 8003b64:	0018      	movs	r0, r3
 8003b66:	f000 fbe7 	bl	8004338 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2180      	movs	r1, #128	@ 0x80
 8003b76:	0109      	lsls	r1, r1, #4
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4910      	ldr	r1, [pc, #64]	@ (8003bc8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b88:	400a      	ands	r2, r1
 8003b8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	021a      	lsls	r2, r3, #8
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003ba0:	e004      	b.n	8003bac <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003ba2:	2317      	movs	r3, #23
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	701a      	strb	r2, [r3, #0]
      break;
 8003baa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	223c      	movs	r2, #60	@ 0x3c
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	5499      	strb	r1, [r3, r2]

  return status;
 8003bb4:	2317      	movs	r3, #23
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	781b      	ldrb	r3, [r3, #0]
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b006      	add	sp, #24
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	08004718 	.word	0x08004718
 8003bc8:	fffffbff 	.word	0xfffffbff

08003bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd6:	230f      	movs	r3, #15
 8003bd8:	18fb      	adds	r3, r7, r3
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	223c      	movs	r2, #60	@ 0x3c
 8003be2:	5c9b      	ldrb	r3, [r3, r2]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_TIM_ConfigClockSource+0x20>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e0bc      	b.n	8003d66 <HAL_TIM_ConfigClockSource+0x19a>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	223c      	movs	r2, #60	@ 0x3c
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	223d      	movs	r2, #61	@ 0x3d
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4a5a      	ldr	r2, [pc, #360]	@ (8003d70 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4a59      	ldr	r2, [pc, #356]	@ (8003d74 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2280      	movs	r2, #128	@ 0x80
 8003c22:	0192      	lsls	r2, r2, #6
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d040      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0xde>
 8003c28:	2280      	movs	r2, #128	@ 0x80
 8003c2a:	0192      	lsls	r2, r2, #6
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d900      	bls.n	8003c32 <HAL_TIM_ConfigClockSource+0x66>
 8003c30:	e088      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x178>
 8003c32:	2280      	movs	r2, #128	@ 0x80
 8003c34:	0152      	lsls	r2, r2, #5
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d100      	bne.n	8003c3c <HAL_TIM_ConfigClockSource+0x70>
 8003c3a:	e088      	b.n	8003d4e <HAL_TIM_ConfigClockSource+0x182>
 8003c3c:	2280      	movs	r2, #128	@ 0x80
 8003c3e:	0152      	lsls	r2, r2, #5
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d900      	bls.n	8003c46 <HAL_TIM_ConfigClockSource+0x7a>
 8003c44:	e07e      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x178>
 8003c46:	2b70      	cmp	r3, #112	@ 0x70
 8003c48:	d018      	beq.n	8003c7c <HAL_TIM_ConfigClockSource+0xb0>
 8003c4a:	d900      	bls.n	8003c4e <HAL_TIM_ConfigClockSource+0x82>
 8003c4c:	e07a      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x178>
 8003c4e:	2b60      	cmp	r3, #96	@ 0x60
 8003c50:	d04f      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x126>
 8003c52:	d900      	bls.n	8003c56 <HAL_TIM_ConfigClockSource+0x8a>
 8003c54:	e076      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x178>
 8003c56:	2b50      	cmp	r3, #80	@ 0x50
 8003c58:	d03b      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x106>
 8003c5a:	d900      	bls.n	8003c5e <HAL_TIM_ConfigClockSource+0x92>
 8003c5c:	e072      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x178>
 8003c5e:	2b40      	cmp	r3, #64	@ 0x40
 8003c60:	d057      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0x146>
 8003c62:	d900      	bls.n	8003c66 <HAL_TIM_ConfigClockSource+0x9a>
 8003c64:	e06e      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x178>
 8003c66:	2b30      	cmp	r3, #48	@ 0x30
 8003c68:	d063      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x166>
 8003c6a:	d86b      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x178>
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d060      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x166>
 8003c70:	d868      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x178>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d05d      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x166>
 8003c76:	2b10      	cmp	r3, #16
 8003c78:	d05b      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x166>
 8003c7a:	e063      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c8c:	f000 fc2e 	bl	80044ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2277      	movs	r2, #119	@ 0x77
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	609a      	str	r2, [r3, #8]
      break;
 8003ca8:	e052      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cba:	f000 fc17 	bl	80044ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2180      	movs	r1, #128	@ 0x80
 8003cca:	01c9      	lsls	r1, r1, #7
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	609a      	str	r2, [r3, #8]
      break;
 8003cd0:	e03e      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cde:	001a      	movs	r2, r3
 8003ce0:	f000 fb88 	bl	80043f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2150      	movs	r1, #80	@ 0x50
 8003cea:	0018      	movs	r0, r3
 8003cec:	f000 fbe2 	bl	80044b4 <TIM_ITRx_SetConfig>
      break;
 8003cf0:	e02e      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cfe:	001a      	movs	r2, r3
 8003d00:	f000 fba6 	bl	8004450 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2160      	movs	r1, #96	@ 0x60
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f000 fbd2 	bl	80044b4 <TIM_ITRx_SetConfig>
      break;
 8003d10:	e01e      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1e:	001a      	movs	r2, r3
 8003d20:	f000 fb68 	bl	80043f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2140      	movs	r1, #64	@ 0x40
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f000 fbc2 	bl	80044b4 <TIM_ITRx_SetConfig>
      break;
 8003d30:	e00e      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	0010      	movs	r0, r2
 8003d3e:	f000 fbb9 	bl	80044b4 <TIM_ITRx_SetConfig>
      break;
 8003d42:	e005      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003d44:	230f      	movs	r3, #15
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	2201      	movs	r2, #1
 8003d4a:	701a      	strb	r2, [r3, #0]
      break;
 8003d4c:	e000      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003d4e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	223d      	movs	r2, #61	@ 0x3d
 8003d54:	2101      	movs	r1, #1
 8003d56:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	223c      	movs	r2, #60	@ 0x3c
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	5499      	strb	r1, [r3, r2]

  return status;
 8003d60:	230f      	movs	r3, #15
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	781b      	ldrb	r3, [r3, #0]
}
 8003d66:	0018      	movs	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b004      	add	sp, #16
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	ffceff88 	.word	0xffceff88
 8003d74:	ffff00ff 	.word	0xffff00ff

08003d78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d80:	46c0      	nop			@ (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b002      	add	sp, #8
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d90:	46c0      	nop			@ (mov r8, r8)
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b002      	add	sp, #8
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003da0:	46c0      	nop			@ (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b002      	add	sp, #8
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003db0:	46c0      	nop			@ (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b002      	add	sp, #8
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dc0:	46c0      	nop			@ (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b002      	add	sp, #8
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a32      	ldr	r2, [pc, #200]	@ (8003ea4 <TIM_Base_SetConfig+0xdc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_Base_SetConfig+0x20>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a31      	ldr	r2, [pc, #196]	@ (8003ea8 <TIM_Base_SetConfig+0xe0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d108      	bne.n	8003dfa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2270      	movs	r2, #112	@ 0x70
 8003dec:	4393      	bics	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a29      	ldr	r2, [pc, #164]	@ (8003ea4 <TIM_Base_SetConfig+0xdc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00f      	beq.n	8003e22 <TIM_Base_SetConfig+0x5a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a28      	ldr	r2, [pc, #160]	@ (8003ea8 <TIM_Base_SetConfig+0xe0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00b      	beq.n	8003e22 <TIM_Base_SetConfig+0x5a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a27      	ldr	r2, [pc, #156]	@ (8003eac <TIM_Base_SetConfig+0xe4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d007      	beq.n	8003e22 <TIM_Base_SetConfig+0x5a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a26      	ldr	r2, [pc, #152]	@ (8003eb0 <TIM_Base_SetConfig+0xe8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d003      	beq.n	8003e22 <TIM_Base_SetConfig+0x5a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a25      	ldr	r2, [pc, #148]	@ (8003eb4 <TIM_Base_SetConfig+0xec>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d108      	bne.n	8003e34 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4a24      	ldr	r2, [pc, #144]	@ (8003eb8 <TIM_Base_SetConfig+0xf0>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2280      	movs	r2, #128	@ 0x80
 8003e38:	4393      	bics	r3, r2
 8003e3a:	001a      	movs	r2, r3
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a11      	ldr	r2, [pc, #68]	@ (8003ea4 <TIM_Base_SetConfig+0xdc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d007      	beq.n	8003e72 <TIM_Base_SetConfig+0xaa>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a12      	ldr	r2, [pc, #72]	@ (8003eb0 <TIM_Base_SetConfig+0xe8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d003      	beq.n	8003e72 <TIM_Base_SetConfig+0xaa>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a11      	ldr	r2, [pc, #68]	@ (8003eb4 <TIM_Base_SetConfig+0xec>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d103      	bne.n	8003e7a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	2201      	movs	r2, #1
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d106      	bne.n	8003e9a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2201      	movs	r2, #1
 8003e92:	4393      	bics	r3, r2
 8003e94:	001a      	movs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	611a      	str	r2, [r3, #16]
  }
}
 8003e9a:	46c0      	nop			@ (mov r8, r8)
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b004      	add	sp, #16
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	46c0      	nop			@ (mov r8, r8)
 8003ea4:	40012c00 	.word	0x40012c00
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40002000 	.word	0x40002000
 8003eb0:	40014400 	.word	0x40014400
 8003eb4:	40014800 	.word	0x40014800
 8003eb8:	fffffcff 	.word	0xfffffcff

08003ebc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	4393      	bics	r3, r2
 8003ed4:	001a      	movs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa4 <TIM_OC1_SetConfig+0xe8>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	4393      	bics	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2202      	movs	r2, #2
 8003f04:	4393      	bics	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a24      	ldr	r2, [pc, #144]	@ (8003fa8 <TIM_OC1_SetConfig+0xec>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d007      	beq.n	8003f2a <TIM_OC1_SetConfig+0x6e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a23      	ldr	r2, [pc, #140]	@ (8003fac <TIM_OC1_SetConfig+0xf0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_OC1_SetConfig+0x6e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a22      	ldr	r2, [pc, #136]	@ (8003fb0 <TIM_OC1_SetConfig+0xf4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10c      	bne.n	8003f44 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	4393      	bics	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2204      	movs	r2, #4
 8003f40:	4393      	bics	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a18      	ldr	r2, [pc, #96]	@ (8003fa8 <TIM_OC1_SetConfig+0xec>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d007      	beq.n	8003f5c <TIM_OC1_SetConfig+0xa0>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a17      	ldr	r2, [pc, #92]	@ (8003fac <TIM_OC1_SetConfig+0xf0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d003      	beq.n	8003f5c <TIM_OC1_SetConfig+0xa0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a16      	ldr	r2, [pc, #88]	@ (8003fb0 <TIM_OC1_SetConfig+0xf4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d111      	bne.n	8003f80 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4a15      	ldr	r2, [pc, #84]	@ (8003fb4 <TIM_OC1_SetConfig+0xf8>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4a14      	ldr	r2, [pc, #80]	@ (8003fb8 <TIM_OC1_SetConfig+0xfc>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	621a      	str	r2, [r3, #32]
}
 8003f9a:	46c0      	nop			@ (mov r8, r8)
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b006      	add	sp, #24
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	fffeff8f 	.word	0xfffeff8f
 8003fa8:	40012c00 	.word	0x40012c00
 8003fac:	40014400 	.word	0x40014400
 8003fb0:	40014800 	.word	0x40014800
 8003fb4:	fffffeff 	.word	0xfffffeff
 8003fb8:	fffffdff 	.word	0xfffffdff

08003fbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	2210      	movs	r2, #16
 8003fd2:	4393      	bics	r3, r2
 8003fd4:	001a      	movs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4a2c      	ldr	r2, [pc, #176]	@ (800409c <TIM_OC2_SetConfig+0xe0>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4a2b      	ldr	r2, [pc, #172]	@ (80040a0 <TIM_OC2_SetConfig+0xe4>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	021b      	lsls	r3, r3, #8
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2220      	movs	r2, #32
 8004006:	4393      	bics	r3, r2
 8004008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a22      	ldr	r2, [pc, #136]	@ (80040a4 <TIM_OC2_SetConfig+0xe8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d10d      	bne.n	800403a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2280      	movs	r2, #128	@ 0x80
 8004022:	4393      	bics	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2240      	movs	r2, #64	@ 0x40
 8004036:	4393      	bics	r3, r2
 8004038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a19      	ldr	r2, [pc, #100]	@ (80040a4 <TIM_OC2_SetConfig+0xe8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <TIM_OC2_SetConfig+0x96>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a18      	ldr	r2, [pc, #96]	@ (80040a8 <TIM_OC2_SetConfig+0xec>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <TIM_OC2_SetConfig+0x96>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a17      	ldr	r2, [pc, #92]	@ (80040ac <TIM_OC2_SetConfig+0xf0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d113      	bne.n	800407a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4a16      	ldr	r2, [pc, #88]	@ (80040b0 <TIM_OC2_SetConfig+0xf4>)
 8004056:	4013      	ands	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4a15      	ldr	r2, [pc, #84]	@ (80040b4 <TIM_OC2_SetConfig+0xf8>)
 800405e:	4013      	ands	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	621a      	str	r2, [r3, #32]
}
 8004094:	46c0      	nop			@ (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b006      	add	sp, #24
 800409a:	bd80      	pop	{r7, pc}
 800409c:	feff8fff 	.word	0xfeff8fff
 80040a0:	fffffcff 	.word	0xfffffcff
 80040a4:	40012c00 	.word	0x40012c00
 80040a8:	40014400 	.word	0x40014400
 80040ac:	40014800 	.word	0x40014800
 80040b0:	fffffbff 	.word	0xfffffbff
 80040b4:	fffff7ff 	.word	0xfffff7ff

080040b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	4a31      	ldr	r2, [pc, #196]	@ (8004194 <TIM_OC3_SetConfig+0xdc>)
 80040ce:	401a      	ands	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004198 <TIM_OC3_SetConfig+0xe0>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2203      	movs	r2, #3
 80040ec:	4393      	bics	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	4a27      	ldr	r2, [pc, #156]	@ (800419c <TIM_OC3_SetConfig+0xe4>)
 80040fe:	4013      	ands	r3, r2
 8004100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a23      	ldr	r2, [pc, #140]	@ (80041a0 <TIM_OC3_SetConfig+0xe8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d10d      	bne.n	8004132 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	4a22      	ldr	r2, [pc, #136]	@ (80041a4 <TIM_OC3_SetConfig+0xec>)
 800411a:	4013      	ands	r3, r2
 800411c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	4a1e      	ldr	r2, [pc, #120]	@ (80041a8 <TIM_OC3_SetConfig+0xf0>)
 800412e:	4013      	ands	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1a      	ldr	r2, [pc, #104]	@ (80041a0 <TIM_OC3_SetConfig+0xe8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d007      	beq.n	800414a <TIM_OC3_SetConfig+0x92>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1b      	ldr	r2, [pc, #108]	@ (80041ac <TIM_OC3_SetConfig+0xf4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d003      	beq.n	800414a <TIM_OC3_SetConfig+0x92>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a1a      	ldr	r2, [pc, #104]	@ (80041b0 <TIM_OC3_SetConfig+0xf8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d113      	bne.n	8004172 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4a19      	ldr	r2, [pc, #100]	@ (80041b4 <TIM_OC3_SetConfig+0xfc>)
 800414e:	4013      	ands	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4a18      	ldr	r2, [pc, #96]	@ (80041b8 <TIM_OC3_SetConfig+0x100>)
 8004156:	4013      	ands	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	621a      	str	r2, [r3, #32]
}
 800418c:	46c0      	nop			@ (mov r8, r8)
 800418e:	46bd      	mov	sp, r7
 8004190:	b006      	add	sp, #24
 8004192:	bd80      	pop	{r7, pc}
 8004194:	fffffeff 	.word	0xfffffeff
 8004198:	fffeff8f 	.word	0xfffeff8f
 800419c:	fffffdff 	.word	0xfffffdff
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	fffff7ff 	.word	0xfffff7ff
 80041a8:	fffffbff 	.word	0xfffffbff
 80041ac:	40014400 	.word	0x40014400
 80041b0:	40014800 	.word	0x40014800
 80041b4:	ffffefff 	.word	0xffffefff
 80041b8:	ffffdfff 	.word	0xffffdfff

080041bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	4a24      	ldr	r2, [pc, #144]	@ (8004264 <TIM_OC4_SetConfig+0xa8>)
 80041d2:	401a      	ands	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4a20      	ldr	r2, [pc, #128]	@ (8004268 <TIM_OC4_SetConfig+0xac>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4a1f      	ldr	r2, [pc, #124]	@ (800426c <TIM_OC4_SetConfig+0xb0>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4a1b      	ldr	r2, [pc, #108]	@ (8004270 <TIM_OC4_SetConfig+0xb4>)
 8004204:	4013      	ands	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	031b      	lsls	r3, r3, #12
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a17      	ldr	r2, [pc, #92]	@ (8004274 <TIM_OC4_SetConfig+0xb8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_OC4_SetConfig+0x70>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a16      	ldr	r2, [pc, #88]	@ (8004278 <TIM_OC4_SetConfig+0xbc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_OC4_SetConfig+0x70>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a15      	ldr	r2, [pc, #84]	@ (800427c <TIM_OC4_SetConfig+0xc0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d109      	bne.n	8004240 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	4a14      	ldr	r2, [pc, #80]	@ (8004280 <TIM_OC4_SetConfig+0xc4>)
 8004230:	4013      	ands	r3, r2
 8004232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	019b      	lsls	r3, r3, #6
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	46c0      	nop			@ (mov r8, r8)
 800425c:	46bd      	mov	sp, r7
 800425e:	b006      	add	sp, #24
 8004260:	bd80      	pop	{r7, pc}
 8004262:	46c0      	nop			@ (mov r8, r8)
 8004264:	ffffefff 	.word	0xffffefff
 8004268:	feff8fff 	.word	0xfeff8fff
 800426c:	fffffcff 	.word	0xfffffcff
 8004270:	ffffdfff 	.word	0xffffdfff
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40014400 	.word	0x40014400
 800427c:	40014800 	.word	0x40014800
 8004280:	ffffbfff 	.word	0xffffbfff

08004284 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	4a21      	ldr	r2, [pc, #132]	@ (8004320 <TIM_OC5_SetConfig+0x9c>)
 800429a:	401a      	ands	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004324 <TIM_OC5_SetConfig+0xa0>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4a19      	ldr	r2, [pc, #100]	@ (8004328 <TIM_OC5_SetConfig+0xa4>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	041b      	lsls	r3, r3, #16
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a15      	ldr	r2, [pc, #84]	@ (800432c <TIM_OC5_SetConfig+0xa8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d007      	beq.n	80042ea <TIM_OC5_SetConfig+0x66>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a14      	ldr	r2, [pc, #80]	@ (8004330 <TIM_OC5_SetConfig+0xac>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d003      	beq.n	80042ea <TIM_OC5_SetConfig+0x66>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a13      	ldr	r2, [pc, #76]	@ (8004334 <TIM_OC5_SetConfig+0xb0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d109      	bne.n	80042fe <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004320 <TIM_OC5_SetConfig+0x9c>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	621a      	str	r2, [r3, #32]
}
 8004318:	46c0      	nop			@ (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	b006      	add	sp, #24
 800431e:	bd80      	pop	{r7, pc}
 8004320:	fffeffff 	.word	0xfffeffff
 8004324:	fffeff8f 	.word	0xfffeff8f
 8004328:	fffdffff 	.word	0xfffdffff
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800

08004338 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	4a22      	ldr	r2, [pc, #136]	@ (80043d8 <TIM_OC6_SetConfig+0xa0>)
 800434e:	401a      	ands	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4a1e      	ldr	r2, [pc, #120]	@ (80043dc <TIM_OC6_SetConfig+0xa4>)
 8004364:	4013      	ands	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4a1a      	ldr	r2, [pc, #104]	@ (80043e0 <TIM_OC6_SetConfig+0xa8>)
 8004378:	4013      	ands	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	051b      	lsls	r3, r3, #20
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a16      	ldr	r2, [pc, #88]	@ (80043e4 <TIM_OC6_SetConfig+0xac>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d007      	beq.n	80043a0 <TIM_OC6_SetConfig+0x68>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a15      	ldr	r2, [pc, #84]	@ (80043e8 <TIM_OC6_SetConfig+0xb0>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d003      	beq.n	80043a0 <TIM_OC6_SetConfig+0x68>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a14      	ldr	r2, [pc, #80]	@ (80043ec <TIM_OC6_SetConfig+0xb4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d109      	bne.n	80043b4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	4a13      	ldr	r2, [pc, #76]	@ (80043f0 <TIM_OC6_SetConfig+0xb8>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	029b      	lsls	r3, r3, #10
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	621a      	str	r2, [r3, #32]
}
 80043ce:	46c0      	nop			@ (mov r8, r8)
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b006      	add	sp, #24
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	46c0      	nop			@ (mov r8, r8)
 80043d8:	ffefffff 	.word	0xffefffff
 80043dc:	feff8fff 	.word	0xfeff8fff
 80043e0:	ffdfffff 	.word	0xffdfffff
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40014400 	.word	0x40014400
 80043ec:	40014800 	.word	0x40014800
 80043f0:	fffbffff 	.word	0xfffbffff

080043f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	2201      	movs	r2, #1
 800440c:	4393      	bics	r3, r2
 800440e:	001a      	movs	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	22f0      	movs	r2, #240	@ 0xf0
 800441e:	4393      	bics	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	220a      	movs	r2, #10
 8004430:	4393      	bics	r3, r2
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	621a      	str	r2, [r3, #32]
}
 8004448:	46c0      	nop			@ (mov r8, r8)
 800444a:	46bd      	mov	sp, r7
 800444c:	b006      	add	sp, #24
 800444e:	bd80      	pop	{r7, pc}

08004450 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	2210      	movs	r2, #16
 8004468:	4393      	bics	r3, r2
 800446a:	001a      	movs	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4a0d      	ldr	r2, [pc, #52]	@ (80044b0 <TIM_TI2_ConfigInputStage+0x60>)
 800447a:	4013      	ands	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	031b      	lsls	r3, r3, #12
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	22a0      	movs	r2, #160	@ 0xa0
 800448c:	4393      	bics	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b006      	add	sp, #24
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	ffff0fff 	.word	0xffff0fff

080044b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a08      	ldr	r2, [pc, #32]	@ (80044e8 <TIM_ITRx_SetConfig+0x34>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	2207      	movs	r2, #7
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	609a      	str	r2, [r3, #8]
}
 80044de:	46c0      	nop			@ (mov r8, r8)
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b004      	add	sp, #16
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			@ (mov r8, r8)
 80044e8:	ffcfff8f 	.word	0xffcfff8f

080044ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	4a09      	ldr	r2, [pc, #36]	@ (8004528 <TIM_ETR_SetConfig+0x3c>)
 8004504:	4013      	ands	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	021a      	lsls	r2, r3, #8
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	431a      	orrs	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4313      	orrs	r3, r2
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	609a      	str	r2, [r3, #8]
}
 8004520:	46c0      	nop			@ (mov r8, r8)
 8004522:	46bd      	mov	sp, r7
 8004524:	b006      	add	sp, #24
 8004526:	bd80      	pop	{r7, pc}
 8004528:	ffff00ff 	.word	0xffff00ff

0800452c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	221f      	movs	r2, #31
 800453c:	4013      	ands	r3, r2
 800453e:	2201      	movs	r2, #1
 8004540:	409a      	lsls	r2, r3
 8004542:	0013      	movs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	43d2      	mvns	r2, r2
 800454e:	401a      	ands	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a1a      	ldr	r2, [r3, #32]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	211f      	movs	r1, #31
 800455c:	400b      	ands	r3, r1
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4099      	lsls	r1, r3
 8004562:	000b      	movs	r3, r1
 8004564:	431a      	orrs	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	46c0      	nop			@ (mov r8, r8)
 800456c:	46bd      	mov	sp, r7
 800456e:	b006      	add	sp, #24
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	223c      	movs	r2, #60	@ 0x3c
 8004582:	5c9b      	ldrb	r3, [r3, r2]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004588:	2302      	movs	r3, #2
 800458a:	e04a      	b.n	8004622 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	223c      	movs	r2, #60	@ 0x3c
 8004590:	2101      	movs	r1, #1
 8004592:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	223d      	movs	r2, #61	@ 0x3d
 8004598:	2102      	movs	r1, #2
 800459a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1e      	ldr	r2, [pc, #120]	@ (800462c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d108      	bne.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2270      	movs	r2, #112	@ 0x70
 80045cc:	4393      	bics	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a11      	ldr	r2, [pc, #68]	@ (800462c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d004      	beq.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a10      	ldr	r2, [pc, #64]	@ (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10c      	bne.n	8004610 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2280      	movs	r2, #128	@ 0x80
 80045fa:	4393      	bics	r3, r2
 80045fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	4313      	orrs	r3, r2
 8004606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	223d      	movs	r2, #61	@ 0x3d
 8004614:	2101      	movs	r1, #1
 8004616:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	223c      	movs	r2, #60	@ 0x3c
 800461c:	2100      	movs	r1, #0
 800461e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	0018      	movs	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	b004      	add	sp, #16
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	40012c00 	.word	0x40012c00
 8004630:	ff0fffff 	.word	0xff0fffff
 8004634:	40000400 	.word	0x40000400

08004638 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004640:	46c0      	nop			@ (mov r8, r8)
 8004642:	46bd      	mov	sp, r7
 8004644:	b002      	add	sp, #8
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004650:	46c0      	nop			@ (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b002      	add	sp, #8
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004660:	46c0      	nop			@ (mov r8, r8)
 8004662:	46bd      	mov	sp, r7
 8004664:	b002      	add	sp, #8
 8004666:	bd80      	pop	{r7, pc}

08004668 <memset>:
 8004668:	0003      	movs	r3, r0
 800466a:	1882      	adds	r2, r0, r2
 800466c:	4293      	cmp	r3, r2
 800466e:	d100      	bne.n	8004672 <memset+0xa>
 8004670:	4770      	bx	lr
 8004672:	7019      	strb	r1, [r3, #0]
 8004674:	3301      	adds	r3, #1
 8004676:	e7f9      	b.n	800466c <memset+0x4>

08004678 <__libc_init_array>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	2600      	movs	r6, #0
 800467c:	4c0c      	ldr	r4, [pc, #48]	@ (80046b0 <__libc_init_array+0x38>)
 800467e:	4d0d      	ldr	r5, [pc, #52]	@ (80046b4 <__libc_init_array+0x3c>)
 8004680:	1b64      	subs	r4, r4, r5
 8004682:	10a4      	asrs	r4, r4, #2
 8004684:	42a6      	cmp	r6, r4
 8004686:	d109      	bne.n	800469c <__libc_init_array+0x24>
 8004688:	2600      	movs	r6, #0
 800468a:	f000 f819 	bl	80046c0 <_init>
 800468e:	4c0a      	ldr	r4, [pc, #40]	@ (80046b8 <__libc_init_array+0x40>)
 8004690:	4d0a      	ldr	r5, [pc, #40]	@ (80046bc <__libc_init_array+0x44>)
 8004692:	1b64      	subs	r4, r4, r5
 8004694:	10a4      	asrs	r4, r4, #2
 8004696:	42a6      	cmp	r6, r4
 8004698:	d105      	bne.n	80046a6 <__libc_init_array+0x2e>
 800469a:	bd70      	pop	{r4, r5, r6, pc}
 800469c:	00b3      	lsls	r3, r6, #2
 800469e:	58eb      	ldr	r3, [r5, r3]
 80046a0:	4798      	blx	r3
 80046a2:	3601      	adds	r6, #1
 80046a4:	e7ee      	b.n	8004684 <__libc_init_array+0xc>
 80046a6:	00b3      	lsls	r3, r6, #2
 80046a8:	58eb      	ldr	r3, [r5, r3]
 80046aa:	4798      	blx	r3
 80046ac:	3601      	adds	r6, #1
 80046ae:	e7f2      	b.n	8004696 <__libc_init_array+0x1e>
 80046b0:	0800476c 	.word	0x0800476c
 80046b4:	0800476c 	.word	0x0800476c
 80046b8:	08004770 	.word	0x08004770
 80046bc:	0800476c 	.word	0x0800476c

080046c0 <_init>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	46c0      	nop			@ (mov r8, r8)
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr

080046cc <_fini>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	46c0      	nop			@ (mov r8, r8)
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr
